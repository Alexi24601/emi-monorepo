//! Submodule defining traits regarding tables that can be extended with new rows.
//! 
//! It additionally provides traits for the variants that actually can be inserted into the
//! database, as while a struct representing a row in a table will most commonly have a primary key
//! that is auto-incremented, the insertable variant will not have this primary key, as the primary
//! key is generated by the database.
//! 
//! The same thing applies to tables which contain other forms of auto-generated fields, which may
//! be populated by either the backend using the `session` of the use (e.g. the `created_by` and
//! `updated_by` fields), or by the database itself (e.g. the `created_at` and `updated_at` fields).
//! 

pub trait Insertable {
	/// The associated type that is inserted into the database.
	type InsertableVariant: InsertableVariant<Row = Self>;
	/// The associated builder type.
	type Builder: InsertableVariantBuilder<Row = Self>;

	/// Returns a new insertable variant builder.
    fn new() -> Self::Builder {
        Default::default()
    }
}


/// Trait for types that can be inserted into the database.
pub trait InsertableVariant {
    /// The associated type that is inserted into the database.
    type Row: Insertable<New = Self>;
    /// The associated builder type.
    type Builder: InsertableVariantBuilder<New = Self>;

    #[cfg(feature = "backend")]
    /// Insert the variant into the database.
    fn insert(
        self,
        conn: &mut crate::types::DBConn,
    ) -> impl std::future::Future<Output = Result<Self::Row, diesel::result::Error>> + '_;
}

/// Trait defining a builder for the insertable variant.
pub trait InsertableVariantBuilder:
    Builder<Object = <Self as InsertableVariantBuilder>::New>
{
    /// The associated type that is inserted into the database.
    type New: InsertableVariant<Builder = Self>;
}
