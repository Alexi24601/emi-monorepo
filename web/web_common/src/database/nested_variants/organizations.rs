//! This module contains the nested structs for the database tables.
//!
//! This file is automatically generated. Do not write anything here.

use std::rc::Rc;

#[derive(PartialEq, Debug, Clone, serde::Serialize, serde::Deserialize, Default)]
pub struct NestedOrganization {
    pub inner: Rc<crate::database::flat_variants::Organization>,
    pub country: Rc<crate::database::flat_variants::Country>,
}

unsafe impl Send for NestedOrganization {}
unsafe impl Sync for NestedOrganization {}
impl crate::database::Tabular for NestedOrganization {
    const TABLE: crate::database::Table = crate::database::Table::Organizations;
}
impl crate::database::Filtrable for NestedOrganization {
    type Filter = crate::database::filter_variants::OrganizationFilter;
}
impl crate::database::Describable for NestedOrganization {
    fn description(&self) -> Option<&str> {
        self.inner.description()
    }
}
impl crate::database::Colorable for NestedOrganization {
    fn color(&self) -> Option<&str> {
        None
    }
}
#[cfg(feature = "frontend")]
impl crate::database::AllRecords for NestedOrganization {
    fn all_records<C: gluesql::core::store::GStore + gluesql::core::store::GStoreMut>(
        filter: Option<&<Self as crate::database::Filtrable>::Filter>,
        limit: Option<i64>,
        offset: Option<i64>,
        connection: &mut gluesql::prelude::Glue<C>,
    ) -> impl std::future::Future<Output = Result<Vec<Self>, crate::api::ApiError>> {
        Self::all(filter, limit, offset, connection)
    }
}
#[cfg(feature = "frontend")]
impl NestedOrganization {
    /// Convert the flat struct to the nested struct.
    ///
    /// # Arguments
    /// * `flat_variant` - The flat struct.
    /// * `connection` - The database connection.
    pub(crate) async fn from_flat(
        flat_variant: crate::database::flat_variants::Organization,
        connection: &mut gluesql::prelude::Glue<
            impl gluesql::core::store::GStore + gluesql::core::store::GStoreMut,
        >,
    ) -> Result<Self, crate::api::ApiError> {
        Ok(Self {
            country: Rc::from(
                crate::database::flat_variants::Country::get(flat_variant.country_id, connection)
                    .await?
                    .unwrap(),
            ),
            inner: Rc::from(flat_variant),
        })
    }
    /// Get the id attribute.
    pub fn get_id<E>(&self) -> &E
    where
        i32: AsRef<E>,
    {
        self.inner.get_id()
    }
    /// Get the name attribute.
    pub fn get_name<E>(&self) -> &E
    where
        String: AsRef<E>,
    {
        self.inner.get_name()
    }
    /// Get the url attribute.
    pub fn get_url<E>(&self) -> &E
    where
        String: AsRef<E>,
    {
        self.inner.get_url()
    }
    /// Get the country_id attribute.
    pub fn get_country_id<E>(&self) -> &E
    where
        i32: AsRef<E>,
    {
        self.inner.get_country_id()
    }
    /// Get the state_province attribute.
    pub fn get_state_province<E>(&self) -> Option<&E>
    where
        String: AsRef<E>,
    {
        self.inner.get_state_province()
    }
    /// Get the domain attribute.
    pub fn get_domain<E>(&self) -> &E
    where
        String: AsRef<E>,
    {
        self.inner.get_domain()
    }
    /// Get the Organization from the database by its ID.
    ///
    /// * `id` - The primary key(s) of the struct to check.
    /// * `connection` - The connection to the database.
    pub async fn get<C: gluesql::core::store::GStore + gluesql::core::store::GStoreMut>(
        id: i32,
        connection: &mut gluesql::prelude::Glue<C>,
    ) -> Result<Option<Self>, crate::api::ApiError> {
        if let Some(flat_variant) =
            crate::database::flat_variants::Organization::get(id, connection).await?
        {
            Ok(Some(Self::from_flat(flat_variant, connection).await?))
        } else {
            Ok(None)
        }
    }
    /// Delete the Organization from the database.
    ///
    /// * `connection` - The connection to the database.
    pub async fn delete<C: gluesql::core::store::GStore + gluesql::core::store::GStoreMut>(
        self,
        connection: &mut gluesql::prelude::Glue<C>,
    ) -> Result<usize, crate::api::ApiError> {
        self.inner.as_ref().clone().delete(connection).await
    }
    /// Delete the Organization from the database by its ID.
    ///
    /// * `id` - The primary key(s) of the struct to delete.
    /// * `connection` - The connection to the database.
    pub async fn delete_from_id<
        C: gluesql::core::store::GStore + gluesql::core::store::GStoreMut,
    >(
        id: i32,
        connection: &mut gluesql::prelude::Glue<C>,
    ) -> Result<usize, crate::api::ApiError> {
        crate::database::flat_variants::Organization::delete_from_id(id, connection).await
    }
    /// Get all Organization from the database.
    ///
    /// * `filter` - The filter to apply to the results.
    /// * `limit` - The maximum number of results, by default `10`.
    /// * `offset` - The offset of the results, by default `0`.
    /// * `connection` - The connection to the database.
    pub async fn all<C: gluesql::core::store::GStore + gluesql::core::store::GStoreMut>(
        filter: Option<&crate::database::filter_variants::OrganizationFilter>,
        limit: Option<i64>,
        offset: Option<i64>,
        connection: &mut gluesql::prelude::Glue<C>,
    ) -> Result<Vec<Self>, crate::api::ApiError> {
        let mut organizations = Vec::new();
        for flat_variant in
            crate::database::flat_variants::Organization::all(filter, limit, offset, connection)
                .await?
                .into_iter()
        {
            organizations.push(Self::from_flat(flat_variant, connection).await?);
        }
        Ok(organizations)
    }
    /// Update or insert the record in the database.
    ///
    /// * `connection` - The connection to the database.
    pub async fn update_or_insert<
        C: gluesql::core::store::GStore + gluesql::core::store::GStoreMut,
    >(
        &self,
        connection: &mut gluesql::prelude::Glue<C>,
    ) -> Result<usize, crate::api::ApiError> {
        crate::database::flat_variants::Country::update_or_insert(
            self.country.as_ref(),
            connection,
        )
        .await?;
        crate::database::flat_variants::Organization::update_or_insert(
            self.inner.as_ref(),
            connection,
        )
        .await
    }
}
