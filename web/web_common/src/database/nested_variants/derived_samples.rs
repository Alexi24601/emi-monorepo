//! This module contains the nested structs for the database tables.
//!
//! This file is automatically generated. Do not write anything here.

use std::rc::Rc;

#[derive(PartialEq, Debug, Clone, serde::Serialize, serde::Deserialize, Default)]
pub struct NestedDerivedSample {
    pub inner: crate::database::flat_variants::DerivedSample,
    pub created_by: Rc<crate::database::nested_variants::NestedUser>,
    pub updated_by: Rc<crate::database::nested_variants::NestedUser>,
    pub parent_sample: Rc<crate::database::nested_variants::NestedSample>,
    pub child_sample: Rc<crate::database::nested_variants::NestedSample>,
    pub unit: Rc<crate::database::nested_variants::NestedUnit>,
}

unsafe impl Send for NestedDerivedSample {}
unsafe impl Sync for NestedDerivedSample {}
impl crate::database::Tabular for NestedDerivedSample {
    const TABLE: crate::database::Table = crate::database::Table::DerivedSamples;
}
impl crate::database::Filtrable for NestedDerivedSample {
    type Filter = crate::database::filter_variants::DerivedSampleFilter;
}
impl crate::database::Describable for NestedDerivedSample {
    fn description(&self) -> Option<&str> {
        self.inner.description()
    }
}
impl crate::database::Colorable for NestedDerivedSample {
    fn color(&self) -> Option<&str> {
        None
    }
}
#[cfg(feature = "frontend")]
impl crate::database::AllRecords for NestedDerivedSample {
    fn all_records<C: gluesql::core::store::GStore + gluesql::core::store::GStoreMut>(
        filter: Option<&<Self as crate::database::Filtrable>::Filter>,
        limit: Option<i64>,
        offset: Option<i64>,
        connection: &mut gluesql::prelude::Glue<C>,
    ) -> impl std::future::Future<Output = Result<Vec<Self>, crate::api::ApiError>> {
        Self::all(filter, limit, offset, connection)
    }
}
#[cfg(feature = "frontend")]
impl NestedDerivedSample {
    /// Convert the flat struct to the nested struct.
    ///
    /// # Arguments
    /// * `flat_variant` - The flat struct.
    /// * `connection` - The database connection.
    pub(crate) async fn from_flat(
        flat_variant: crate::database::flat_variants::DerivedSample,
        connection: &mut gluesql::prelude::Glue<
            impl gluesql::core::store::GStore + gluesql::core::store::GStoreMut,
        >,
    ) -> Result<Self, crate::api::ApiError> {
        Ok(Self {
            created_by: Rc::from(
                crate::database::nested_variants::NestedUser::get(
                    flat_variant.created_by,
                    connection,
                )
                .await?
                .unwrap(),
            ),
            updated_by: Rc::from(
                crate::database::nested_variants::NestedUser::get(
                    flat_variant.updated_by,
                    connection,
                )
                .await?
                .unwrap(),
            ),
            parent_sample: Rc::from(
                crate::database::nested_variants::NestedSample::get(
                    flat_variant.parent_sample_id,
                    connection,
                )
                .await?
                .unwrap(),
            ),
            child_sample: Rc::from(
                crate::database::nested_variants::NestedSample::get(
                    flat_variant.child_sample_id,
                    connection,
                )
                .await?
                .unwrap(),
            ),
            unit: Rc::from(
                crate::database::nested_variants::NestedUnit::get(flat_variant.unit_id, connection)
                    .await?
                    .unwrap(),
            ),
            inner: flat_variant,
        })
    }
    /// Get the created_by attribute.
    pub fn get_created_by<E>(&self) -> &E
    where
        i32: AsRef<E>,
    {
        self.inner.get_created_by()
    }
    /// Get the created_at attribute.
    pub fn get_created_at<E>(&self) -> &E
    where
        chrono::NaiveDateTime: AsRef<E>,
    {
        self.inner.get_created_at()
    }
    /// Get the updated_by attribute.
    pub fn get_updated_by<E>(&self) -> &E
    where
        i32: AsRef<E>,
    {
        self.inner.get_updated_by()
    }
    /// Get the updated_at attribute.
    pub fn get_updated_at<E>(&self) -> &E
    where
        chrono::NaiveDateTime: AsRef<E>,
    {
        self.inner.get_updated_at()
    }
    /// Get the parent_sample_id attribute.
    pub fn get_parent_sample_id<E>(&self) -> &E
    where
        uuid::Uuid: AsRef<E>,
    {
        self.inner.get_parent_sample_id()
    }
    /// Get the child_sample_id attribute.
    pub fn get_child_sample_id<E>(&self) -> &E
    where
        uuid::Uuid: AsRef<E>,
    {
        self.inner.get_child_sample_id()
    }
    /// Get the quantity attribute.
    pub fn get_quantity<E>(&self) -> &E
    where
        f64: AsRef<E>,
    {
        self.inner.get_quantity()
    }
    /// Get the unit_id attribute.
    pub fn get_unit_id<E>(&self) -> &E
    where
        i32: AsRef<E>,
    {
        self.inner.get_unit_id()
    }
    /// Insert the DerivedSample into the database.
    ///
    /// * `connection` - The connection to the database.
    pub async fn insert<C: gluesql::core::store::GStore + gluesql::core::store::GStoreMut>(
        self,
        connection: &mut gluesql::prelude::Glue<C>,
    ) -> Result<usize, crate::api::ApiError> {
        self.inner.insert(connection).await
    }
    /// Get the DerivedSample from the database by its ID.
    ///
    /// * `( parent_sample_id, child_sample_id )` - The primary key(s) of the struct to check.
    /// * `connection` - The connection to the database.
    pub async fn get<C: gluesql::core::store::GStore + gluesql::core::store::GStoreMut>(
        (parent_sample_id, child_sample_id): (uuid::Uuid, uuid::Uuid),
        connection: &mut gluesql::prelude::Glue<C>,
    ) -> Result<Option<Self>, crate::api::ApiError> {
        if let Some(flat_variant) = crate::database::flat_variants::DerivedSample::get(
            (parent_sample_id, child_sample_id),
            connection,
        )
        .await?
        {
            Ok(Some(Self::from_flat(flat_variant, connection).await?))
        } else {
            Ok(None)
        }
    }
    /// Delete the DerivedSample from the database.
    ///
    /// * `connection` - The connection to the database.
    pub async fn delete<C: gluesql::core::store::GStore + gluesql::core::store::GStoreMut>(
        self,
        connection: &mut gluesql::prelude::Glue<C>,
    ) -> Result<usize, crate::api::ApiError> {
        self.inner.delete(connection).await
    }
    /// Delete the DerivedSample from the database by its ID.
    ///
    /// * `( parent_sample_id, child_sample_id )` - The primary key(s) of the struct to delete.
    /// * `connection` - The connection to the database.
    pub async fn delete_from_id<
        C: gluesql::core::store::GStore + gluesql::core::store::GStoreMut,
    >(
        (parent_sample_id, child_sample_id): (uuid::Uuid, uuid::Uuid),
        connection: &mut gluesql::prelude::Glue<C>,
    ) -> Result<usize, crate::api::ApiError> {
        crate::database::flat_variants::DerivedSample::delete_from_id(
            (parent_sample_id, child_sample_id),
            connection,
        )
        .await
    }
    /// Update the struct in the database.
    ///
    /// * `connection` - The connection to the database.
    pub async fn update<C: gluesql::core::store::GStore + gluesql::core::store::GStoreMut>(
        self,
        connection: &mut gluesql::prelude::Glue<C>,
    ) -> Result<usize, crate::api::ApiError> {
        self.inner.update(connection).await
    }
    /// Update the struct in the database if it exists, otherwise insert it.
    ///
    /// * `connection` - The connection to the database.
    pub async fn update_or_insert<
        C: gluesql::core::store::GStore + gluesql::core::store::GStoreMut,
    >(
        self,
        connection: &mut gluesql::prelude::Glue<C>,
    ) -> Result<usize, crate::api::ApiError> {
        self.inner.update_or_insert(connection).await
    }
    /// Get all DerivedSample from the database.
    ///
    /// * `filter` - The filter to apply to the results.
    /// * `limit` - The maximum number of results, by default `10`.
    /// * `offset` - The offset of the results, by default `0`.
    /// * `connection` - The connection to the database.
    pub async fn all<C: gluesql::core::store::GStore + gluesql::core::store::GStoreMut>(
        filter: Option<&crate::database::filter_variants::DerivedSampleFilter>,
        limit: Option<i64>,
        offset: Option<i64>,
        connection: &mut gluesql::prelude::Glue<C>,
    ) -> Result<Vec<Self>, crate::api::ApiError> {
        let mut derived_samples = Vec::new();
        for flat_variant in
            crate::database::flat_variants::DerivedSample::all(filter, limit, offset, connection)
                .await?
                .into_iter()
        {
            derived_samples.push(Self::from_flat(flat_variant, connection).await?);
        }
        Ok(derived_samples)
    }
}
