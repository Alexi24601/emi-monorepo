//! This module contains the nested structs for the database tables.
//!
//! This file is automatically generated. Do not write anything here.

use serde::Deserialize;
use serde::Serialize;
use super::tables::*;
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub struct NestedArchivable {
    pub inner: Archivable,
    pub archived_by: User,
}

#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub struct NestedContainerHorizontalRule {
    pub inner: ContainerHorizontalRule,
    pub item_type: ItemCategory,
    pub other_item_type: ItemCategory,
}

#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub struct NestedContainerVerticalRule {
    pub inner: ContainerVerticalRule,
    pub container_item_type: ItemCategory,
    pub contained_item_type: ItemCategory,
}

#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub struct NestedDocument {
    pub inner: Document,
    pub format: DocumentFormat,
}

#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub struct NestedEditable {
    pub inner: Editable,
    pub created_by: User,
}

#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub struct NestedEdit {
    pub inner: Edit,
    pub editable: NestedEditable,
}

#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub struct NestedItemCategoryRelationship {
    pub inner: ItemCategoryRelationship,
    pub parent: ItemCategory,
    pub child: ItemCategory,
}

#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub struct NestedItemCategoryUnit {
    pub inner: ItemCategoryUnit,
    pub item_category: ItemCategory,
    pub unit: Unit,
}

#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub struct NestedItemContinuousQuantity {
    pub inner: ItemContinuousQuantity,
    pub item: NestedItem,
    pub unit: Unit,
    pub sensor: Option<NestedItem>,
    pub measured_by: Option<User>,
}

#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub struct NestedItemDiscreteQuantity {
    pub inner: ItemDiscreteQuantity,
    pub item: NestedItem,
    pub unit: Unit,
    pub measured_by: Option<User>,
}

#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub struct NestedItemLocation {
    pub inner: ItemLocation,
    pub item: Option<NestedItem>,
    pub location: Option<NestedLocation>,
    pub previous_location: Option<NestedLocation>,
}

#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub struct NestedItemUnit {
    pub inner: ItemUnit,
    pub item: NestedItem,
    pub unit: Unit,
}

#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub struct NestedItem {
    pub inner: Item,
    pub parent: Option<Box<NestedItem>>,
}

#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub struct NestedLocation {
    pub inner: Location,
    pub geolocalization_device: Option<NestedItem>,
    pub altitude_device: Option<NestedItem>,
    pub parent_location: Option<Box<NestedLocation>>,
    pub state: LocationState,
}

#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub struct NestedManufacturedItemCategory {
    pub inner: ManufacturedItemCategory,
    pub manifacturer: NestedOrganization,
}

#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub struct NestedNotification {
    pub inner: Notification,
    pub user: User,
    pub row: Option<NestedEditable>,
}

#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub struct NestedOrganizationAuthorization {
    pub inner: OrganizationAuthorization,
    pub organization: NestedOrganization,
    pub editable: NestedEditable,
    pub role: Role,
}

#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub struct NestedOrganizationLocation {
    pub inner: OrganizationLocation,
    pub organization: Option<NestedOrganization>,
    pub location: Option<NestedLocation>,
    pub previous_location: Option<Box<NestedOrganizationLocation>>,
}

#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub struct NestedOrganization {
    pub inner: Organization,
    pub state: Option<OrganizationState>,
    pub parent_organization: Option<Box<NestedOrganization>>,
    pub logo: Option<NestedDocument>,
}

#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub struct NestedProcedureContinuousRequirement {
    pub inner: ProcedureContinuousRequirement,
    pub procedure: Procedure,
    pub item_category: ItemCategory,
    pub unit: Option<Unit>,
}

#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub struct NestedProcedureDiscreteRequirement {
    pub inner: ProcedureDiscreteRequirement,
    pub procedure: Procedure,
    pub item_category: ItemCategory,
    pub unit: Option<Unit>,
}

#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub struct NestedProjectContinuousRequirement {
    pub inner: ProjectContinuousRequirement,
    pub project: NestedProject,
    pub item: ItemCategory,
    pub unit: Option<Unit>,
}

#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub struct NestedProjectDiscreteRequirement {
    pub inner: ProjectDiscreteRequirement,
    pub project: NestedProject,
    pub item: ItemCategory,
    pub unit: Option<Unit>,
}

#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub struct NestedProjectMilestone {
    pub inner: ProjectMilestone,
    pub project: NestedProject,
}

#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub struct NestedProject {
    pub inner: Project,
    pub state: ProjectState,
    pub parent_project: Option<Box<NestedProject>>,
    pub created_by: User,
}

#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub struct NestedSampleTaxa {
    pub inner: SampleTaxa,
    pub sample: NestedSample,
    pub taxon: Taxa,
}

#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub struct NestedSampledIndividualTaxa {
    pub inner: SampledIndividualTaxa,
    pub sampled_individual: SampledIndividual,
    pub taxon: Taxa,
}

#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub struct NestedSample {
    pub inner: Sample,
    pub derived_from: Option<Box<NestedSample>>,
}

#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub struct NestedSpectra {
    pub inner: Spectra,
    pub spectra_collection: NestedSpectraCollection,
}

#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub struct NestedSpectraCollection {
    pub inner: SpectraCollection,
    pub sample: NestedSample,
}

#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub struct NestedTeamAuthorization {
    pub inner: TeamAuthorization,
    pub team: NestedTeam,
    pub editable: NestedEditable,
    pub role: Role,
}

#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub struct NestedTeam {
    pub inner: Team,
    pub parent_team: Option<Box<NestedTeam>>,
    pub team_state: TeamState,
}

#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub struct NestedUserAuthorization {
    pub inner: UserAuthorization,
    pub user: User,
    pub editable: NestedEditable,
    pub role: Role,
}

#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub struct NestedUserEmail {
    pub inner: UserEmail,
    pub user: User,
    pub login_provider: LoginProvider,
}

