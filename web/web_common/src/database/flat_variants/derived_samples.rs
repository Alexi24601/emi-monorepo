//! This file is automatically generated, do not modify it directly.
use super::*;
#[derive(PartialEq, Debug, Clone, Copy, serde::Serialize, serde::Deserialize, Default)]
pub struct DerivedSample {
    pub created_by: i32,
    pub created_at: chrono::NaiveDateTime,
    pub updated_by: i32,
    pub updated_at: chrono::NaiveDateTime,
    pub parent_sample_id: uuid::Uuid,
    pub child_sample_id: uuid::Uuid,
    pub quantity: f64,
    pub unit_id: i32,
}

unsafe impl Send for DerivedSample {}
unsafe impl Sync for DerivedSample {}
impl Tabular for DerivedSample {
    const TABLE: crate::database::Table = crate::database::Table::DerivedSamples;
}
impl Describable for DerivedSample {
    fn description(&self) -> Option<&str> {
        None
    }
}
impl Colorable for DerivedSample {
    fn color(&self) -> Option<&str> {
        None
    }
}

impl Filtrable for crate::database::flat_variants::DerivedSample {
    type Filter = crate::database::filter_variants::DerivedSampleFilter;
}
#[cfg(feature = "frontend")]
impl AllRecords for DerivedSample {
    fn all_records<C: gluesql::core::store::GStore + gluesql::core::store::GStoreMut>(
        filter: Option<&<Self as Filtrable>::Filter>,
        limit: Option<i64>,
        offset: Option<i64>,
        connection: &mut gluesql::prelude::Glue<C>,
    ) -> impl std::future::Future<Output = Result<Vec<Self>, crate::api::ApiError>> {
        Self::all(filter, limit, offset, connection)
    }
}
#[cfg(feature = "frontend")]
impl DerivedSample {
    /// Get the created_by attribute.
    pub fn get_created_by<E>(&self) -> &E
    where
        i32: AsRef<E>,
    {
        self.created_by.as_ref()
    }

    /// Get the created_at attribute.
    pub fn get_created_at<E>(&self) -> &E
    where
        chrono::NaiveDateTime: AsRef<E>,
    {
        self.created_at.as_ref()
    }

    /// Get the updated_by attribute.
    pub fn get_updated_by<E>(&self) -> &E
    where
        i32: AsRef<E>,
    {
        self.updated_by.as_ref()
    }

    /// Get the updated_at attribute.
    pub fn get_updated_at<E>(&self) -> &E
    where
        chrono::NaiveDateTime: AsRef<E>,
    {
        self.updated_at.as_ref()
    }

    /// Get the parent_sample_id attribute.
    pub fn get_parent_sample_id<E>(&self) -> &E
    where
        uuid::Uuid: AsRef<E>,
    {
        self.parent_sample_id.as_ref()
    }

    /// Get the child_sample_id attribute.
    pub fn get_child_sample_id<E>(&self) -> &E
    where
        uuid::Uuid: AsRef<E>,
    {
        self.child_sample_id.as_ref()
    }

    /// Get the quantity attribute.
    pub fn get_quantity<E>(&self) -> &E
    where
        f64: AsRef<E>,
    {
        self.quantity.as_ref()
    }

    /// Get the unit_id attribute.
    pub fn get_unit_id<E>(&self) -> &E
    where
        i32: AsRef<E>,
    {
        self.unit_id.as_ref()
    }

    pub fn into_row(self) -> Vec<gluesql::core::ast_builder::ExprNode<'static>> {
        vec![
            gluesql::core::ast_builder::num(self.created_by),
            gluesql::core::ast_builder::timestamp(self.created_at.to_string()),
            gluesql::core::ast_builder::num(self.updated_by),
            gluesql::core::ast_builder::timestamp(self.updated_at.to_string()),
            gluesql::core::ast_builder::uuid(self.parent_sample_id.to_string()),
            gluesql::core::ast_builder::uuid(self.child_sample_id.to_string()),
            gluesql::core::ast_builder::num(self.quantity),
            gluesql::core::ast_builder::num(self.unit_id),
        ]
    }

    /// Insert the DerivedSample into the database.
    ///
    /// * `connection` - The connection to the database.
    pub async fn insert<C: gluesql::core::store::GStore + gluesql::core::store::GStoreMut>(
        self,
        connection: &mut gluesql::prelude::Glue<C>,
    ) -> Result<usize, crate::api::ApiError> {
        use gluesql::core::ast_builder::*;
        Ok(table("derived_samples")
            .insert()
            .columns("created_by, created_at, updated_by, updated_at, parent_sample_id, child_sample_id, quantity, unit_id")
            .values(vec![self.into_row()])
            .execute(connection)
            .await
             .map(|payload| match payload {
                 gluesql::prelude::Payload::Insert ( number_of_inserted_rows ) => number_of_inserted_rows,
                 _ => unreachable!("Payload must be an Insert"),
             })?)
    }

    /// Get the DerivedSample from the database by its ID.
    ///
    /// * `( parent_sample_id, child_sample_id )` - The primary key(s) of the struct to check.
    /// * `connection` - The connection to the database.
    pub async fn get<C: gluesql::core::store::GStore + gluesql::core::store::GStoreMut>(
        (parent_sample_id, child_sample_id): (uuid::Uuid, uuid::Uuid),
        connection: &mut gluesql::prelude::Glue<C>,
    ) -> Result<Option<Self>, crate::api::ApiError> {
        use gluesql::core::ast_builder::*;
        let select_row = table("derived_samples")
            .select()
            .filter(col("parent_sample_id").eq(parent_sample_id.to_string()))
            .filter(col("child_sample_id").eq(child_sample_id.to_string()))
            .project("created_by, created_at, updated_by, updated_at, parent_sample_id, child_sample_id, quantity, unit_id")
            .limit(1)
            .execute(connection)
            .await?;
        Ok(select_row
            .select()
            .unwrap()
            .map(Self::from_row)
            .collect::<Vec<_>>()
            .pop())
    }

    /// Delete the DerivedSample from the database.
    ///
    /// * `connection` - The connection to the database.
    pub async fn delete<C: gluesql::core::store::GStore + gluesql::core::store::GStoreMut>(
        self,
        connection: &mut gluesql::prelude::Glue<C>,
    ) -> Result<usize, crate::api::ApiError> {
        Self::delete_from_id((self.parent_sample_id, self.child_sample_id), connection).await
    }

    /// Delete the DerivedSample from the database by its ID.
    ///
    /// * `( parent_sample_id, child_sample_id )` - The primary key(s) of the struct to delete.
    /// * `connection` - The connection to the database.
    pub async fn delete_from_id<
        C: gluesql::core::store::GStore + gluesql::core::store::GStoreMut,
    >(
        (parent_sample_id, child_sample_id): (uuid::Uuid, uuid::Uuid),
        connection: &mut gluesql::prelude::Glue<C>,
    ) -> Result<usize, crate::api::ApiError> {
        use gluesql::core::ast_builder::*;
        Ok(table("derived_samples")
            .delete()
            .filter(col("parent_sample_id").eq(parent_sample_id.to_string()))
            .filter(col("child_sample_id").eq(child_sample_id.to_string()))
            .execute(connection)
            .await
            .map(|payload| match payload {
                gluesql::prelude::Payload::Delete(number_of_deleted_rows) => number_of_deleted_rows,
                _ => unreachable!("Payload must be a Delete"),
            })?)
    }

    /// Update the struct in the database.
    ///
    /// * `connection` - The connection to the database.
    pub async fn update<C: gluesql::core::store::GStore + gluesql::core::store::GStoreMut>(
        self,
        connection: &mut gluesql::prelude::Glue<C>,
    ) -> Result<usize, crate::api::ApiError> {
        use gluesql::core::ast_builder::*;
        table("derived_samples")
            .update()
            .set(
                "created_by",
                gluesql::core::ast_builder::num(self.created_by),
            )
            .set(
                "created_at",
                gluesql::core::ast_builder::timestamp(self.created_at.to_string()),
            )
            .set(
                "updated_by",
                gluesql::core::ast_builder::num(self.updated_by),
            )
            .set(
                "updated_at",
                gluesql::core::ast_builder::timestamp(self.updated_at.to_string()),
            )
            .set(
                "parent_sample_id",
                gluesql::core::ast_builder::uuid(self.parent_sample_id.to_string()),
            )
            .set(
                "child_sample_id",
                gluesql::core::ast_builder::uuid(self.child_sample_id.to_string()),
            )
            .set("quantity", gluesql::core::ast_builder::num(self.quantity))
            .set("unit_id", gluesql::core::ast_builder::num(self.unit_id))
            .execute(connection)
            .await
            .map(|payload| match payload {
                gluesql::prelude::Payload::Update(number_of_updated_rows) => number_of_updated_rows,
                _ => unreachable!("Expected Payload::Update"),
            })
            .map_err(crate::api::ApiError::from)
    }

    /// Update the struct in the database if it exists, otherwise insert it.
    ///
    /// * `connection` - The connection to the database.
    pub async fn update_or_insert<
        C: gluesql::core::store::GStore + gluesql::core::store::GStoreMut,
    >(
        self,
        connection: &mut gluesql::prelude::Glue<C>,
    ) -> Result<usize, crate::api::ApiError> {
        let number_of_rows = self.clone().update(connection).await?;
        if number_of_rows == 0 {
            self.insert(connection).await
        } else {
            Ok(number_of_rows)
        }
    }
    /// Get all DerivedSample from the database.
    ///
    /// * `filter` - The filter to apply to the results.
    /// * `limit` - The maximum number of results, by default `10`.
    /// * `offset` - The offset of the results, by default `0`.
    /// * `connection` - The connection to the database.
    pub async fn all<C: gluesql::core::store::GStore + gluesql::core::store::GStoreMut>(
        filter: Option<&crate::database::filter_variants::DerivedSampleFilter>,
        limit: Option<i64>,
        offset: Option<i64>,
        connection: &mut gluesql::prelude::Glue<C>,
    ) -> Result<Vec<Self>, crate::api::ApiError> {
        use gluesql::core::ast_builder::*;
        let select_row = table("derived_samples")
            .select()
            .filter(filter.map_or_else(|| gluesql::core::ast::Expr::Literal(gluesql::core::ast::AstLiteral::Boolean(true)).into(), |filter| filter.as_filter_expression()))
           .project("created_by, created_at, updated_by, updated_at, parent_sample_id, child_sample_id, quantity, unit_id")
            .order_by("unit_id DESC, unit_id DESC")
            .offset(offset.unwrap_or(0))
            .limit(limit.unwrap_or(10))
            .execute(connection)
            .await?;
        Ok(select_row
            .select()
            .unwrap()
            .map(Self::from_row)
            .collect::<Vec<_>>())
    }
    fn from_row(row: std::collections::HashMap<&str, &gluesql::prelude::Value>) -> Self {
        Self {
            created_by: match row.get("created_by").unwrap() {
                gluesql::prelude::Value::I32(created_by) => created_by.clone(),
                _ => unreachable!("Expected I32"),
            },
            created_at: match row.get("created_at").unwrap() {
                gluesql::prelude::Value::Timestamp(created_at) => created_at.clone(),
                _ => unreachable!("Expected Timestamp"),
            },
            updated_by: match row.get("updated_by").unwrap() {
                gluesql::prelude::Value::I32(updated_by) => updated_by.clone(),
                _ => unreachable!("Expected I32"),
            },
            updated_at: match row.get("updated_at").unwrap() {
                gluesql::prelude::Value::Timestamp(updated_at) => updated_at.clone(),
                _ => unreachable!("Expected Timestamp"),
            },
            parent_sample_id: match row.get("parent_sample_id").unwrap() {
                gluesql::prelude::Value::Uuid(parent_sample_id) => {
                    uuid::Uuid::from_u128(*parent_sample_id)
                }
                _ => unreachable!("Expected Uuid"),
            },
            child_sample_id: match row.get("child_sample_id").unwrap() {
                gluesql::prelude::Value::Uuid(child_sample_id) => {
                    uuid::Uuid::from_u128(*child_sample_id)
                }
                _ => unreachable!("Expected Uuid"),
            },
            quantity: match row.get("quantity").unwrap() {
                gluesql::prelude::Value::F64(quantity) => quantity.clone(),
                _ => unreachable!("Expected F64"),
            },
            unit_id: match row.get("unit_id").unwrap() {
                gluesql::prelude::Value::I32(unit_id) => unit_id.clone(),
                _ => unreachable!("Expected I32"),
            },
        }
    }
}
