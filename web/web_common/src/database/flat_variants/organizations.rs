//! This file is automatically generated, do not modify it directly.
use super::*;
#[derive(PartialEq, Debug, Clone, serde::Serialize, serde::Deserialize, Default)]
pub struct Organization {
    pub id: i32,
    pub name: String,
    pub url: String,
    pub country_id: i32,
    pub state_province: Option<String>,
    pub domain: String,
}

unsafe impl Send for Organization {}
unsafe impl Sync for Organization {}
impl Tabular for Organization {
    const TABLE: crate::database::Table = crate::database::Table::Organizations;
}
impl Describable for Organization {
    fn description(&self) -> Option<&str> {
        None
    }
}
impl Colorable for Organization {
    fn color(&self) -> Option<&str> {
        None
    }
}

impl Filtrable for crate::database::flat_variants::Organization {
    type Filter = crate::database::filter_variants::OrganizationFilter;
}
#[cfg(feature = "frontend")]
impl AllRecords for Organization {
    fn all_records<C: gluesql::core::store::GStore + gluesql::core::store::GStoreMut>(
        filter: Option<&<Self as Filtrable>::Filter>,
        limit: Option<i64>,
        offset: Option<i64>,
        connection: &mut gluesql::prelude::Glue<C>,
    ) -> impl std::future::Future<Output = Result<Vec<Self>, crate::api::ApiError>> {
        Self::all(filter, limit, offset, connection)
    }
}
#[cfg(feature = "frontend")]
impl Organization {
    /// Get the id attribute.
    pub fn get_id<E>(&self) -> &E
    where
        i32: AsRef<E>,
    {
        self.id.as_ref()
    }

    /// Get the name attribute.
    pub fn get_name<E>(&self) -> &E
    where
        String: AsRef<E>,
    {
        self.name.as_ref()
    }

    /// Get the url attribute.
    pub fn get_url<E>(&self) -> &E
    where
        String: AsRef<E>,
    {
        self.url.as_ref()
    }

    /// Get the country_id attribute.
    pub fn get_country_id<E>(&self) -> &E
    where
        i32: AsRef<E>,
    {
        self.country_id.as_ref()
    }

    /// Get the state_province attribute.
    pub fn get_state_province<E>(&self) -> Option<&E>
    where
        String: AsRef<E>,
    {
        self.state_province.as_ref().map(|value| value.as_ref())
    }

    /// Get the domain attribute.
    pub fn get_domain<E>(&self) -> &E
    where
        String: AsRef<E>,
    {
        self.domain.as_ref()
    }

    pub fn into_row(self) -> Vec<gluesql::core::ast_builder::ExprNode<'static>> {
        vec![
            gluesql::core::ast_builder::num(self.id),
            gluesql::core::ast_builder::text(self.name),
            gluesql::core::ast_builder::text(self.url),
            gluesql::core::ast_builder::num(self.country_id),
            match self.state_province {
                Some(state_province) => gluesql::core::ast_builder::text(state_province),
                None => gluesql::core::ast_builder::null(),
            },
            gluesql::core::ast_builder::text(self.domain),
        ]
    }

    /// Insert the Organization into the database.
    ///
    /// * `connection` - The connection to the database.
    async fn insert<C: gluesql::core::store::GStore + gluesql::core::store::GStoreMut>(
        self,
        connection: &mut gluesql::prelude::Glue<C>,
    ) -> Result<usize, crate::api::ApiError> {
        use gluesql::core::ast_builder::*;
        Ok(table("organizations")
            .insert()
            .columns("id, name, url, country_id, state_province, domain")
            .values(vec![self.into_row()])
            .execute(connection)
            .await
            .map(|payload| match payload {
                gluesql::prelude::Payload::Insert(number_of_inserted_rows) => {
                    number_of_inserted_rows
                }
                _ => unreachable!("Payload must be an Insert"),
            })?)
    }

    /// Get the Organization from the database by its ID.
    ///
    /// * `id` - The primary key(s) of the struct to check.
    /// * `connection` - The connection to the database.
    pub async fn get<C: gluesql::core::store::GStore + gluesql::core::store::GStoreMut>(
        id: i32,
        connection: &mut gluesql::prelude::Glue<C>,
    ) -> Result<Option<Self>, crate::api::ApiError> {
        use gluesql::core::ast_builder::*;
        let select_row = table("organizations")
            .select()
            .filter(col("id").eq(id.to_string()))
            .project("id, name, url, country_id, state_province, domain")
            .limit(1)
            .execute(connection)
            .await?;
        Ok(select_row
            .select()
            .unwrap()
            .map(Self::from_row)
            .collect::<Vec<_>>()
            .pop())
    }

    /// Delete the Organization from the database.
    ///
    /// * `connection` - The connection to the database.
    pub async fn delete<C: gluesql::core::store::GStore + gluesql::core::store::GStoreMut>(
        self,
        connection: &mut gluesql::prelude::Glue<C>,
    ) -> Result<usize, crate::api::ApiError> {
        Self::delete_from_id(self.id, connection).await
    }

    /// Delete the Organization from the database by its ID.
    ///
    /// * `id` - The primary key(s) of the struct to delete.
    /// * `connection` - The connection to the database.
    pub async fn delete_from_id<
        C: gluesql::core::store::GStore + gluesql::core::store::GStoreMut,
    >(
        id: i32,
        connection: &mut gluesql::prelude::Glue<C>,
    ) -> Result<usize, crate::api::ApiError> {
        use gluesql::core::ast_builder::*;
        Ok(table("organizations")
            .delete()
            .filter(col("id").eq(id.to_string()))
            .execute(connection)
            .await
            .map(|payload| match payload {
                gluesql::prelude::Payload::Delete(number_of_deleted_rows) => number_of_deleted_rows,
                _ => unreachable!("Payload must be a Delete"),
            })?)
    }

    /// Update the struct in the database.
    ///
    /// * `connection` - The connection to the database.
    async fn update<C: gluesql::core::store::GStore + gluesql::core::store::GStoreMut>(
        self,
        connection: &mut gluesql::prelude::Glue<C>,
    ) -> Result<usize, crate::api::ApiError> {
        use gluesql::core::ast_builder::*;
        let mut update_row = table("organizations")
            .update()
            .set("id", gluesql::core::ast_builder::num(self.id))
            .set("name", gluesql::core::ast_builder::text(self.name))
            .set("url", gluesql::core::ast_builder::text(self.url))
            .set(
                "country_id",
                gluesql::core::ast_builder::num(self.country_id),
            )
            .set("domain", gluesql::core::ast_builder::text(self.domain));
        if let Some(state_province) = self.state_province {
            update_row = update_row.set(
                "state_province",
                gluesql::core::ast_builder::text(state_province),
            );
        }
        update_row
            .execute(connection)
            .await
            .map(|payload| match payload {
                gluesql::prelude::Payload::Update(number_of_updated_rows) => number_of_updated_rows,
                _ => unreachable!("Expected Payload::Update"),
            })
            .map_err(crate::api::ApiError::from)
    }

    /// Update the struct in the database if it exists, otherwise insert it.
    ///
    /// * `connection` - The connection to the database.
    pub async fn update_or_insert<
        C: gluesql::core::store::GStore + gluesql::core::store::GStoreMut,
    >(
        &self,
        connection: &mut gluesql::prelude::Glue<C>,
    ) -> Result<usize, crate::api::ApiError> {
        let number_of_rows = self.clone().update(connection).await?;
        if number_of_rows == 0 {
            self.clone().insert(connection).await
        } else {
            Ok(number_of_rows)
        }
    }
    /// Get all Organization from the database.
    ///
    /// * `filter` - The filter to apply to the results.
    /// * `limit` - The maximum number of results, by default `10`.
    /// * `offset` - The offset of the results, by default `0`.
    /// * `connection` - The connection to the database.
    pub async fn all<C: gluesql::core::store::GStore + gluesql::core::store::GStoreMut>(
        filter: Option<&crate::database::filter_variants::OrganizationFilter>,
        limit: Option<i64>,
        offset: Option<i64>,
        connection: &mut gluesql::prelude::Glue<C>,
    ) -> Result<Vec<Self>, crate::api::ApiError> {
        use gluesql::core::ast_builder::*;
        let select_row = table("organizations")
            .select()
            .filter(filter.map_or_else(
                || {
                    gluesql::core::ast::Expr::Literal(gluesql::core::ast::AstLiteral::Boolean(true))
                        .into()
                },
                |filter| filter.as_filter_expression(),
            ))
            .project("id, name, url, country_id, state_province, domain")
            .order_by("domain DESC")
            .offset(offset.unwrap_or(0))
            .limit(limit.unwrap_or(10))
            .execute(connection)
            .await?;
        Ok(select_row
            .select()
            .unwrap()
            .map(Self::from_row)
            .collect::<Vec<_>>())
    }
    fn from_row(row: std::collections::HashMap<&str, &gluesql::prelude::Value>) -> Self {
        Self {
            id: match row.get("id").unwrap() {
                gluesql::prelude::Value::I32(id) => id.clone(),
                _ => unreachable!("Expected I32"),
            },
            name: match row.get("name").unwrap() {
                gluesql::prelude::Value::Str(name) => name.clone(),
                _ => unreachable!("Expected Str"),
            },
            url: match row.get("url").unwrap() {
                gluesql::prelude::Value::Str(url) => url.clone(),
                _ => unreachable!("Expected Str"),
            },
            country_id: match row.get("country_id").unwrap() {
                gluesql::prelude::Value::I32(country_id) => country_id.clone(),
                _ => unreachable!("Expected I32"),
            },
            state_province: match row.get("state_province").unwrap() {
                gluesql::prelude::Value::Null => None,
                gluesql::prelude::Value::Str(state_province) => Some(state_province.clone()),
                _ => unreachable!("Expected Str"),
            },
            domain: match row.get("domain").unwrap() {
                gluesql::prelude::Value::Str(domain) => domain.clone(),
                _ => unreachable!("Expected Str"),
            },
        }
    }
}
