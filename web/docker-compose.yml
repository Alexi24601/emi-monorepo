version: '3.8'

services:
  postgres:
    image: postgres:latest
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      ADMINISTRATORS_TEAM_NAME: ${ADMINISTRATORS_TEAM_NAME}
    volumes:
      - ${POSTGRES_DATABASE_DIRECTORY}:/var/lib/postgresql/data
      - ./backend/db_data:/app
    ports:
      - "5432:5432"
    networks:
      - backend
    restart: on-failure

  pgadmin:
    image: dpage/pgadmin4:latest
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
    volumes:
      - ./pgadmin/servers.json:/pgadmin4/servers.json
    ports:
      - "5050:80"
    networks:
      - backend
    depends_on:
      - postgres
    restart: on-failure

  redis:
    image: redis:latest
    environment:
      REDIS_PORT: ${REDIS_PORT}
    volumes:
      - ${REDIS_DATABASE_DIRECTORY}:/data
    networks:
      - backend
    restart: on-failure

  actix-server:
    stdin_open: true # docker run -i
    tty: true        # docker run -t
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        ACTIX_PORT: ${ACTIX_PORT}
        DOCUMENTS_DIRECTORY: ${DOCUMENTS_DIRECTORY}
    environment:
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      RUST_BACKTRACE: ${RUST_BACKTRACE}
      GITHUB_CLIENT_ID: ${GITHUB_CLIENT_ID}
      GITHUB_CLIENT_SECRET: ${GITHUB_CLIENT_SECRET}
      GITHUB_REDIRECT_URI: ${GITHUB_REDIRECT_URI}
      ORCID_CLIENT_ID: ${ORCID_CLIENT_ID}
      ORCID_CLIENT_SECRET: ${ORCID_CLIENT_SECRET}
      SIRIUS_USERNAME: ${SIRIUS_USERNAME}
      SIRIUS_PASSWORD: ${SIRIUS_PASSWORD}
      ACCESS_TOKEN_PUBLIC_KEY: ${ACCESS_TOKEN_PUBLIC_KEY}
      ACCESS_TOKEN_PRIVATE_KEY: ${ACCESS_TOKEN_PRIVATE_KEY}
      ACCESS_TOKEN_MINUTES: ${ACCESS_TOKEN_MINUTES}
      REFRESH_TOKEN_PUBLIC_KEY: ${REFRESH_TOKEN_PUBLIC_KEY}
      REFRESH_TOKEN_PRIVATE_KEY: ${REFRESH_TOKEN_PRIVATE_KEY}
      REFRESH_TOKEN_MINUTES: ${REFRESH_TOKEN_MINUTES}
      ACTIX_PORT: ${ACTIX_PORT}
      ACTIX_WORKER_THREADS: ${ACTIX_WORKER_THREADS}
      ADMINISTRATORS_TEAM_NAME: ${ADMINISTRATORS_TEAM_NAME}
      DOCUMENTS_DIRECTORY: ${DOCUMENTS_DIRECTORY}
    volumes:
      - ./:/app
    ports:
      - "${ACTIX_PORT}:${ACTIX_PORT}"
    depends_on:
      - postgres
      - redis
    networks:
      - backend
    restart: on-failure

  yew-frontend:
    stdin_open: true # docker run -i
    tty: true        # docker run -t
    build:
      context: ./frontend
      args:
        TRUNK_PORT: ${TRUNK_PORT}
        ACTIX_PORT: ${ACTIX_PORT}
    environment:
      TRUNK_PORT: ${TRUNK_PORT}
      DOMAIN: ${DOMAIN}
      ACTIX_PORT: ${ACTIX_PORT}
      RUST_BACKTRACE: ${RUST_BACKTRACE}
    volumes:
      - ./:/app
    ports:
      - "${TRUNK_PORT}:${TRUNK_PORT}"
    depends_on:
      - actix-server
    networks:
      - frontend
      - backend

  nginx:
    stdin_open: true # docker run -i
    tty: true        # docker run -t
    build:
      context: ./nginx
      args:
        ACTIX_PORT: ${ACTIX_PORT}
        TRUNK_PORT: ${TRUNK_PORT}
        DOMAIN: ${DOMAIN}
        NGINX_WORKER_PROCESSES: ${NGINX_WORKER_PROCESSES}
    volumes:
      - ./nginx:/app
    environment:
      ACTIX_PORT: ${ACTIX_PORT}
      TRUNK_PORT: ${TRUNK_PORT}
      DOMAIN: ${DOMAIN}
      NGINX_WORKER_PROCESSES: ${NGINX_WORKER_PROCESSES}
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - actix-server
      - yew-frontend
    networks:
      - frontend
      - backend
    restart: on-failure

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
