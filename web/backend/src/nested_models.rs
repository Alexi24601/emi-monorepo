//! This module contains the nested structs for the database tables.
//!
//! This file is automatically generated. Do not write anything here.

use serde::Deserialize;
use serde::Serialize;
use diesel::r2d2::ConnectionManager;
use diesel::r2d2::PooledConnection;
use crate::models::*;
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Eq)]
pub struct NestedContainerHorizontalRule {
    pub inner: ContainerHorizontalRule,
    pub created_by: User,
    pub item_type: NestedItemCategory,
    pub other_item_type: NestedItemCategory,
}

impl NestedContainerHorizontalRule {
    /// Get the nested struct from the provided primary key.
    ///
    /// # Arguments
    /// * `id` - The primary key of the row.
    /// * `connection` - The database connection.
    pub fn get(
        id: i32,
        connection: &mut PooledConnection<ConnectionManager<diesel::prelude::PgConnection>>,
    ) -> Result<Self, diesel::result::Error>
    {
        let flat_struct = ContainerHorizontalRule::get(id, connection)?;
        Ok(Self {
            inner: ContainerHorizontalRule::get(flat_struct.id, connection)?,
            created_by: User::get(flat_struct.created_by, connection)?,
            item_type: NestedItemCategory::get(flat_struct.item_type_id, connection)?,
            other_item_type: NestedItemCategory::get(flat_struct.other_item_type_id, connection)?,
        })
    }
}
impl From<web_common::database::nested_models::NestedContainerHorizontalRule> for NestedContainerHorizontalRule {
    fn from(item: web_common::database::nested_models::NestedContainerHorizontalRule) -> Self {
        Self {
            inner: item.inner.into(),
            created_by: item.created_by.into(),
            item_type: item.item_type.into(),
            other_item_type: item.other_item_type.into(),
        }
    }
}
impl From<NestedContainerHorizontalRule> for web_common::database::nested_models::NestedContainerHorizontalRule {
    fn from(item: NestedContainerHorizontalRule) -> Self {
        Self {
            inner: item.inner.into(),
            created_by: item.created_by.into(),
            item_type: item.item_type.into(),
            other_item_type: item.other_item_type.into(),
        }
    }
}
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Eq)]
pub struct NestedContainerVerticalRule {
    pub inner: ContainerVerticalRule,
    pub created_by: User,
    pub container_item_type: NestedItemCategory,
    pub contained_item_type: NestedItemCategory,
}

impl NestedContainerVerticalRule {
    /// Get the nested struct from the provided primary key.
    ///
    /// # Arguments
    /// * `id` - The primary key of the row.
    /// * `connection` - The database connection.
    pub fn get(
        id: i32,
        connection: &mut PooledConnection<ConnectionManager<diesel::prelude::PgConnection>>,
    ) -> Result<Self, diesel::result::Error>
    {
        let flat_struct = ContainerVerticalRule::get(id, connection)?;
        Ok(Self {
            inner: ContainerVerticalRule::get(flat_struct.id, connection)?,
            created_by: User::get(flat_struct.created_by, connection)?,
            container_item_type: NestedItemCategory::get(flat_struct.container_item_type_id, connection)?,
            contained_item_type: NestedItemCategory::get(flat_struct.contained_item_type_id, connection)?,
        })
    }
}
impl From<web_common::database::nested_models::NestedContainerVerticalRule> for NestedContainerVerticalRule {
    fn from(item: web_common::database::nested_models::NestedContainerVerticalRule) -> Self {
        Self {
            inner: item.inner.into(),
            created_by: item.created_by.into(),
            container_item_type: item.container_item_type.into(),
            contained_item_type: item.contained_item_type.into(),
        }
    }
}
impl From<NestedContainerVerticalRule> for web_common::database::nested_models::NestedContainerVerticalRule {
    fn from(item: NestedContainerVerticalRule) -> Self {
        Self {
            inner: item.inner.into(),
            created_by: item.created_by.into(),
            container_item_type: item.container_item_type.into(),
            contained_item_type: item.contained_item_type.into(),
        }
    }
}
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Eq)]
pub struct NestedDocument {
    pub inner: Document,
    pub author: User,
    pub format: DocumentFormat,
}

impl NestedDocument {
    /// Get the nested struct from the provided primary key.
    ///
    /// # Arguments
    /// * `id` - The primary key of the row.
    /// * `connection` - The database connection.
    pub fn get(
        id: uuid::Uuid,
        connection: &mut PooledConnection<ConnectionManager<diesel::prelude::PgConnection>>,
    ) -> Result<Self, diesel::result::Error>
    {
        let flat_struct = Document::get(id, connection)?;
        Ok(Self {
            inner: Document::get(flat_struct.id, connection)?,
            author: User::get(flat_struct.author_id, connection)?,
            format: DocumentFormat::get(flat_struct.format_id, connection)?,
        })
    }
}
impl From<web_common::database::nested_models::NestedDocument> for NestedDocument {
    fn from(item: web_common::database::nested_models::NestedDocument) -> Self {
        Self {
            inner: item.inner.into(),
            author: item.author.into(),
            format: item.format.into(),
        }
    }
}
impl From<NestedDocument> for web_common::database::nested_models::NestedDocument {
    fn from(item: NestedDocument) -> Self {
        Self {
            inner: item.inner.into(),
            author: item.author.into(),
            format: item.format.into(),
        }
    }
}
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Eq)]
pub struct NestedItemCategory {
    pub inner: ItemCategory,
    pub created_by: User,
}

impl NestedItemCategory {
    /// Get the nested struct from the provided primary key.
    ///
    /// # Arguments
    /// * `id` - The primary key of the row.
    /// * `connection` - The database connection.
    pub fn get(
        id: i32,
        connection: &mut PooledConnection<ConnectionManager<diesel::prelude::PgConnection>>,
    ) -> Result<Self, diesel::result::Error>
    {
        let flat_struct = ItemCategory::get(id, connection)?;
        Ok(Self {
            inner: ItemCategory::get(flat_struct.id, connection)?,
            created_by: User::get(flat_struct.created_by, connection)?,
        })
    }
}
impl From<web_common::database::nested_models::NestedItemCategory> for NestedItemCategory {
    fn from(item: web_common::database::nested_models::NestedItemCategory) -> Self {
        Self {
            inner: item.inner.into(),
            created_by: item.created_by.into(),
        }
    }
}
impl From<NestedItemCategory> for web_common::database::nested_models::NestedItemCategory {
    fn from(item: NestedItemCategory) -> Self {
        Self {
            inner: item.inner.into(),
            created_by: item.created_by.into(),
        }
    }
}
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Eq)]
pub struct NestedItemCategoryRelationship {
    pub inner: ItemCategoryRelationship,
    pub parent: NestedItemCategory,
    pub child: NestedItemCategory,
    pub added_by: User,
}

impl NestedItemCategoryRelationship {
    /// Get the nested struct from the provided primary key.
    ///
    /// # Arguments
    /// * `id` - The primary key of the row.
    /// * `connection` - The database connection.
    pub fn get(
        id: i32,
        connection: &mut PooledConnection<ConnectionManager<diesel::prelude::PgConnection>>,
    ) -> Result<Self, diesel::result::Error>
    {
        let flat_struct = ItemCategoryRelationship::get(id, connection)?;
        Ok(Self {
            inner: ItemCategoryRelationship::get(flat_struct.id, connection)?,
            parent: NestedItemCategory::get(flat_struct.parent_id, connection)?,
            child: NestedItemCategory::get(flat_struct.child_id, connection)?,
            added_by: User::get(flat_struct.added_by, connection)?,
        })
    }
}
impl From<web_common::database::nested_models::NestedItemCategoryRelationship> for NestedItemCategoryRelationship {
    fn from(item: web_common::database::nested_models::NestedItemCategoryRelationship) -> Self {
        Self {
            inner: item.inner.into(),
            parent: item.parent.into(),
            child: item.child.into(),
            added_by: item.added_by.into(),
        }
    }
}
impl From<NestedItemCategoryRelationship> for web_common::database::nested_models::NestedItemCategoryRelationship {
    fn from(item: NestedItemCategoryRelationship) -> Self {
        Self {
            inner: item.inner.into(),
            parent: item.parent.into(),
            child: item.child.into(),
            added_by: item.added_by.into(),
        }
    }
}
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Eq)]
pub struct NestedItemCategoryUnit {
    pub inner: ItemCategoryUnit,
    pub item_category: NestedItemCategory,
    pub unit: Unit,
}

impl NestedItemCategoryUnit {
    /// Get the nested struct from the provided primary key.
    ///
    /// # Arguments
    /// * `id` - The primary key of the row.
    /// * `connection` - The database connection.
    pub fn get(
        id: i32,
        connection: &mut PooledConnection<ConnectionManager<diesel::prelude::PgConnection>>,
    ) -> Result<Self, diesel::result::Error>
    {
        let flat_struct = ItemCategoryUnit::get(id, connection)?;
        Ok(Self {
            inner: ItemCategoryUnit::get(flat_struct.id, connection)?,
            item_category: NestedItemCategory::get(flat_struct.item_category_id, connection)?,
            unit: Unit::get(flat_struct.unit_id, connection)?,
        })
    }
}
impl From<web_common::database::nested_models::NestedItemCategoryUnit> for NestedItemCategoryUnit {
    fn from(item: web_common::database::nested_models::NestedItemCategoryUnit) -> Self {
        Self {
            inner: item.inner.into(),
            item_category: item.item_category.into(),
            unit: item.unit.into(),
        }
    }
}
impl From<NestedItemCategoryUnit> for web_common::database::nested_models::NestedItemCategoryUnit {
    fn from(item: NestedItemCategoryUnit) -> Self {
        Self {
            inner: item.inner.into(),
            item_category: item.item_category.into(),
            unit: item.unit.into(),
        }
    }
}
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Eq)]
pub struct NestedItemContinuousQuantity {
    pub inner: ItemContinuousQuantity,
    pub item: NestedItem,
    pub unit: Unit,
    pub sensor: NestedItem,
    pub measured_by: User,
}

impl NestedItemContinuousQuantity {
    /// Get the nested struct from the provided primary key.
    ///
    /// # Arguments
    /// * `id` - The primary key of the row.
    /// * `connection` - The database connection.
    pub fn get(
        id: uuid::Uuid,
        connection: &mut PooledConnection<ConnectionManager<diesel::prelude::PgConnection>>,
    ) -> Result<Self, diesel::result::Error>
    {
        let flat_struct = ItemContinuousQuantity::get(id, connection)?;
        Ok(Self {
            inner: ItemContinuousQuantity::get(flat_struct.id, connection)?,
            item: NestedItem::get(flat_struct.item_id, connection)?,
            unit: Unit::get(flat_struct.unit_id, connection)?,
            sensor: flat_struct.sensor_id.map(|flat_struct| NestedItem::get(flat_struct, connection)).transpose()?,
            measured_by: flat_struct.measured_by.map(|flat_struct| User::get(flat_struct, connection)).transpose()?,
        })
    }
}
impl From<web_common::database::nested_models::NestedItemContinuousQuantity> for NestedItemContinuousQuantity {
    fn from(item: web_common::database::nested_models::NestedItemContinuousQuantity) -> Self {
        Self {
            inner: item.inner.into(),
            item: item.item.into(),
            unit: item.unit.into(),
            sensor: item.sensor.map(|item| item.into()),
            measured_by: item.measured_by.map(|item| item.into()),
        }
    }
}
impl From<NestedItemContinuousQuantity> for web_common::database::nested_models::NestedItemContinuousQuantity {
    fn from(item: NestedItemContinuousQuantity) -> Self {
        Self {
            inner: item.inner.into(),
            item: item.item.into(),
            unit: item.unit.into(),
            sensor: item.sensor.map(|item| item.into()),
            measured_by: item.measured_by.map(|item| item.into()),
        }
    }
}
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Eq)]
pub struct NestedItemDiscreteQuantity {
    pub inner: ItemDiscreteQuantity,
    pub item: NestedItem,
    pub unit: Unit,
    pub measured_by: User,
}

impl NestedItemDiscreteQuantity {
    /// Get the nested struct from the provided primary key.
    ///
    /// # Arguments
    /// * `id` - The primary key of the row.
    /// * `connection` - The database connection.
    pub fn get(
        id: uuid::Uuid,
        connection: &mut PooledConnection<ConnectionManager<diesel::prelude::PgConnection>>,
    ) -> Result<Self, diesel::result::Error>
    {
        let flat_struct = ItemDiscreteQuantity::get(id, connection)?;
        Ok(Self {
            inner: ItemDiscreteQuantity::get(flat_struct.id, connection)?,
            item: NestedItem::get(flat_struct.item_id, connection)?,
            unit: Unit::get(flat_struct.unit_id, connection)?,
            measured_by: flat_struct.measured_by.map(|flat_struct| User::get(flat_struct, connection)).transpose()?,
        })
    }
}
impl From<web_common::database::nested_models::NestedItemDiscreteQuantity> for NestedItemDiscreteQuantity {
    fn from(item: web_common::database::nested_models::NestedItemDiscreteQuantity) -> Self {
        Self {
            inner: item.inner.into(),
            item: item.item.into(),
            unit: item.unit.into(),
            measured_by: item.measured_by.map(|item| item.into()),
        }
    }
}
impl From<NestedItemDiscreteQuantity> for web_common::database::nested_models::NestedItemDiscreteQuantity {
    fn from(item: NestedItemDiscreteQuantity) -> Self {
        Self {
            inner: item.inner.into(),
            item: item.item.into(),
            unit: item.unit.into(),
            measured_by: item.measured_by.map(|item| item.into()),
        }
    }
}
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Eq)]
pub struct NestedItemLocation {
    pub inner: ItemLocation,
    pub item: NestedItem,
    pub located_by: User,
    pub location: NestedLocation,
}

impl NestedItemLocation {
    /// Get the nested struct from the provided primary key.
    ///
    /// # Arguments
    /// * `id` - The primary key of the row.
    /// * `connection` - The database connection.
    pub fn get(
        id: uuid::Uuid,
        connection: &mut PooledConnection<ConnectionManager<diesel::prelude::PgConnection>>,
    ) -> Result<Self, diesel::result::Error>
    {
        let flat_struct = ItemLocation::get(id, connection)?;
        Ok(Self {
            inner: ItemLocation::get(flat_struct.id, connection)?,
            item: flat_struct.item_id.map(|flat_struct| NestedItem::get(flat_struct, connection)).transpose()?,
            located_by: flat_struct.located_by.map(|flat_struct| User::get(flat_struct, connection)).transpose()?,
            location: flat_struct.location_id.map(|flat_struct| NestedLocation::get(flat_struct, connection)).transpose()?,
        })
    }
}
impl From<web_common::database::nested_models::NestedItemLocation> for NestedItemLocation {
    fn from(item: web_common::database::nested_models::NestedItemLocation) -> Self {
        Self {
            inner: item.inner.into(),
            item: item.item.map(|item| item.into()),
            located_by: item.located_by.map(|item| item.into()),
            location: item.location.map(|item| item.into()),
        }
    }
}
impl From<NestedItemLocation> for web_common::database::nested_models::NestedItemLocation {
    fn from(item: NestedItemLocation) -> Self {
        Self {
            inner: item.inner.into(),
            item: item.item.map(|item| item.into()),
            located_by: item.located_by.map(|item| item.into()),
            location: item.location.map(|item| item.into()),
        }
    }
}
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Eq)]
pub struct NestedItemUnit {
    pub inner: ItemUnit,
    pub item: NestedItem,
    pub unit: Unit,
}

impl NestedItemUnit {
    /// Get the nested struct from the provided primary key.
    ///
    /// # Arguments
    /// * `id` - The primary key of the row.
    /// * `connection` - The database connection.
    pub fn get(
        id: uuid::Uuid,
        connection: &mut PooledConnection<ConnectionManager<diesel::prelude::PgConnection>>,
    ) -> Result<Self, diesel::result::Error>
    {
        let flat_struct = ItemUnit::get(id, connection)?;
        Ok(Self {
            inner: ItemUnit::get(flat_struct.id, connection)?,
            item: NestedItem::get(flat_struct.item_id, connection)?,
            unit: Unit::get(flat_struct.unit_id, connection)?,
        })
    }
}
impl From<web_common::database::nested_models::NestedItemUnit> for NestedItemUnit {
    fn from(item: web_common::database::nested_models::NestedItemUnit) -> Self {
        Self {
            inner: item.inner.into(),
            item: item.item.into(),
            unit: item.unit.into(),
        }
    }
}
impl From<NestedItemUnit> for web_common::database::nested_models::NestedItemUnit {
    fn from(item: NestedItemUnit) -> Self {
        Self {
            inner: item.inner.into(),
            item: item.item.into(),
            unit: item.unit.into(),
        }
    }
}
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Eq)]
pub struct NestedItem {
    pub inner: Item,
    pub parent: Uuid,
}

impl NestedItem {
    /// Get the nested struct from the provided primary key.
    ///
    /// # Arguments
    /// * `id` - The primary key of the row.
    /// * `connection` - The database connection.
    pub fn get(
        id: uuid::Uuid,
        connection: &mut PooledConnection<ConnectionManager<diesel::prelude::PgConnection>>,
    ) -> Result<Self, diesel::result::Error>
    {
        let flat_struct = Item::get(id, connection)?;
        Ok(Self {
            inner: Item::get(flat_struct.id, connection)?,
            parent: flat_struct.parent_id.map(|flat_struct| Uuid::get(flat_struct, connection)).transpose()?,
        })
    }
}
impl From<web_common::database::nested_models::NestedItem> for NestedItem {
    fn from(item: web_common::database::nested_models::NestedItem) -> Self {
        Self {
            inner: item.inner.into(),
            parent: item.parent.map(|item| item.into()),
        }
    }
}
impl From<NestedItem> for web_common::database::nested_models::NestedItem {
    fn from(item: NestedItem) -> Self {
        Self {
            inner: item.inner.into(),
            parent: item.parent.map(|item| item.into()),
        }
    }
}
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Eq)]
pub struct NestedLocation {
    pub inner: Location,
    pub geolocalization_device: NestedItem,
    pub altitude_device: NestedItem,
    pub parent_location: Uuid,
}

impl NestedLocation {
    /// Get the nested struct from the provided primary key.
    ///
    /// # Arguments
    /// * `id` - The primary key of the row.
    /// * `connection` - The database connection.
    pub fn get(
        id: uuid::Uuid,
        connection: &mut PooledConnection<ConnectionManager<diesel::prelude::PgConnection>>,
    ) -> Result<Self, diesel::result::Error>
    {
        let flat_struct = Location::get(id, connection)?;
        Ok(Self {
            inner: Location::get(flat_struct.id, connection)?,
            geolocalization_device: flat_struct.geolocalization_device_id.map(|flat_struct| NestedItem::get(flat_struct, connection)).transpose()?,
            altitude_device: flat_struct.altitude_device_id.map(|flat_struct| NestedItem::get(flat_struct, connection)).transpose()?,
            parent_location: flat_struct.parent_location_id.map(|flat_struct| Uuid::get(flat_struct, connection)).transpose()?,
        })
    }
}
impl From<web_common::database::nested_models::NestedLocation> for NestedLocation {
    fn from(item: web_common::database::nested_models::NestedLocation) -> Self {
        Self {
            inner: item.inner.into(),
            geolocalization_device: item.geolocalization_device.map(|item| item.into()),
            altitude_device: item.altitude_device.map(|item| item.into()),
            parent_location: item.parent_location.map(|item| item.into()),
        }
    }
}
impl From<NestedLocation> for web_common::database::nested_models::NestedLocation {
    fn from(item: NestedLocation) -> Self {
        Self {
            inner: item.inner.into(),
            geolocalization_device: item.geolocalization_device.map(|item| item.into()),
            altitude_device: item.altitude_device.map(|item| item.into()),
            parent_location: item.parent_location.map(|item| item.into()),
        }
    }
}
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Eq)]
pub struct NestedManufacturedItemCategory {
    pub inner: ManufacturedItemCategory,
    pub manifacturer: NestedOrganization,
}

impl NestedManufacturedItemCategory {
    /// Get the nested struct from the provided primary key.
    ///
    /// # Arguments
    /// * `id` - The primary key of the row.
    /// * `connection` - The database connection.
    pub fn get(
        id: i32,
        connection: &mut PooledConnection<ConnectionManager<diesel::prelude::PgConnection>>,
    ) -> Result<Self, diesel::result::Error>
    {
        let flat_struct = ManufacturedItemCategory::get(id, connection)?;
        Ok(Self {
            inner: ManufacturedItemCategory::get(flat_struct.id, connection)?,
            manifacturer: NestedOrganization::get(flat_struct.manifacturer_id, connection)?,
        })
    }
}
impl From<web_common::database::nested_models::NestedManufacturedItemCategory> for NestedManufacturedItemCategory {
    fn from(item: web_common::database::nested_models::NestedManufacturedItemCategory) -> Self {
        Self {
            inner: item.inner.into(),
            manifacturer: item.manifacturer.into(),
        }
    }
}
impl From<NestedManufacturedItemCategory> for web_common::database::nested_models::NestedManufacturedItemCategory {
    fn from(item: NestedManufacturedItemCategory) -> Self {
        Self {
            inner: item.inner.into(),
            manifacturer: item.manifacturer.into(),
        }
    }
}
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Eq)]
pub struct NestedNotification {
    pub inner: Notification,
    pub user: User,
}

impl NestedNotification {
    /// Get the nested struct from the provided primary key.
    ///
    /// # Arguments
    /// * `id` - The primary key of the row.
    /// * `connection` - The database connection.
    pub fn get(
        id: i32,
        connection: &mut PooledConnection<ConnectionManager<diesel::prelude::PgConnection>>,
    ) -> Result<Self, diesel::result::Error>
    {
        let flat_struct = Notification::get(id, connection)?;
        Ok(Self {
            inner: Notification::get(flat_struct.id, connection)?,
            user: User::get(flat_struct.user_id, connection)?,
        })
    }
}
impl From<web_common::database::nested_models::NestedNotification> for NestedNotification {
    fn from(item: web_common::database::nested_models::NestedNotification) -> Self {
        Self {
            inner: item.inner.into(),
            user: item.user.into(),
        }
    }
}
impl From<NestedNotification> for web_common::database::nested_models::NestedNotification {
    fn from(item: NestedNotification) -> Self {
        Self {
            inner: item.inner.into(),
            user: item.user.into(),
        }
    }
}
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Eq)]
pub struct NestedOrganization {
    pub inner: Organization,
    pub parent_organization: i32,
}

impl NestedOrganization {
    /// Get the nested struct from the provided primary key.
    ///
    /// # Arguments
    /// * `id` - The primary key of the row.
    /// * `connection` - The database connection.
    pub fn get(
        id: i32,
        connection: &mut PooledConnection<ConnectionManager<diesel::prelude::PgConnection>>,
    ) -> Result<Self, diesel::result::Error>
    {
        let flat_struct = Organization::get(id, connection)?;
        Ok(Self {
            inner: Organization::get(flat_struct.id, connection)?,
            parent_organization: flat_struct.parent_organization_id.map(|flat_struct| i32::get(flat_struct, connection)).transpose()?,
        })
    }
}
impl From<web_common::database::nested_models::NestedOrganization> for NestedOrganization {
    fn from(item: web_common::database::nested_models::NestedOrganization) -> Self {
        Self {
            inner: item.inner.into(),
            parent_organization: item.parent_organization.map(|item| item.into()),
        }
    }
}
impl From<NestedOrganization> for web_common::database::nested_models::NestedOrganization {
    fn from(item: NestedOrganization) -> Self {
        Self {
            inner: item.inner.into(),
            parent_organization: item.parent_organization.map(|item| item.into()),
        }
    }
}
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub struct NestedProcedureContinuousRequirement {
    pub inner: ProcedureContinuousRequirement,
    pub created_by: User,
    pub procedure: NestedProcedure,
    pub item_category: NestedItemCategory,
    pub unit: Unit,
}

impl NestedProcedureContinuousRequirement {
    /// Get the nested struct from the provided primary key.
    ///
    /// # Arguments
    /// * `id` - The primary key of the row.
    /// * `connection` - The database connection.
    pub fn get(
        id: i32,
        connection: &mut PooledConnection<ConnectionManager<diesel::prelude::PgConnection>>,
    ) -> Result<Self, diesel::result::Error>
    {
        let flat_struct = ProcedureContinuousRequirement::get(id, connection)?;
        Ok(Self {
            inner: ProcedureContinuousRequirement::get(flat_struct.id, connection)?,
            created_by: User::get(flat_struct.created_by, connection)?,
            procedure: NestedProcedure::get(flat_struct.procedure_id, connection)?,
            item_category: NestedItemCategory::get(flat_struct.item_category_id, connection)?,
            unit: flat_struct.unit_id.map(|flat_struct| Unit::get(flat_struct, connection)).transpose()?,
        })
    }
}
impl From<web_common::database::nested_models::NestedProcedureContinuousRequirement> for NestedProcedureContinuousRequirement {
    fn from(item: web_common::database::nested_models::NestedProcedureContinuousRequirement) -> Self {
        Self {
            inner: item.inner.into(),
            created_by: item.created_by.into(),
            procedure: item.procedure.into(),
            item_category: item.item_category.into(),
            unit: item.unit.map(|item| item.into()),
        }
    }
}
impl From<NestedProcedureContinuousRequirement> for web_common::database::nested_models::NestedProcedureContinuousRequirement {
    fn from(item: NestedProcedureContinuousRequirement) -> Self {
        Self {
            inner: item.inner.into(),
            created_by: item.created_by.into(),
            procedure: item.procedure.into(),
            item_category: item.item_category.into(),
            unit: item.unit.map(|item| item.into()),
        }
    }
}
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Eq)]
pub struct NestedProcedureDiscreteRequirement {
    pub inner: ProcedureDiscreteRequirement,
    pub created_by: User,
    pub procedure: NestedProcedure,
    pub item_category: NestedItemCategory,
    pub unit: Unit,
}

impl NestedProcedureDiscreteRequirement {
    /// Get the nested struct from the provided primary key.
    ///
    /// # Arguments
    /// * `id` - The primary key of the row.
    /// * `connection` - The database connection.
    pub fn get(
        id: i32,
        connection: &mut PooledConnection<ConnectionManager<diesel::prelude::PgConnection>>,
    ) -> Result<Self, diesel::result::Error>
    {
        let flat_struct = ProcedureDiscreteRequirement::get(id, connection)?;
        Ok(Self {
            inner: ProcedureDiscreteRequirement::get(flat_struct.id, connection)?,
            created_by: User::get(flat_struct.created_by, connection)?,
            procedure: NestedProcedure::get(flat_struct.procedure_id, connection)?,
            item_category: NestedItemCategory::get(flat_struct.item_category_id, connection)?,
            unit: flat_struct.unit_id.map(|flat_struct| Unit::get(flat_struct, connection)).transpose()?,
        })
    }
}
impl From<web_common::database::nested_models::NestedProcedureDiscreteRequirement> for NestedProcedureDiscreteRequirement {
    fn from(item: web_common::database::nested_models::NestedProcedureDiscreteRequirement) -> Self {
        Self {
            inner: item.inner.into(),
            created_by: item.created_by.into(),
            procedure: item.procedure.into(),
            item_category: item.item_category.into(),
            unit: item.unit.map(|item| item.into()),
        }
    }
}
impl From<NestedProcedureDiscreteRequirement> for web_common::database::nested_models::NestedProcedureDiscreteRequirement {
    fn from(item: NestedProcedureDiscreteRequirement) -> Self {
        Self {
            inner: item.inner.into(),
            created_by: item.created_by.into(),
            procedure: item.procedure.into(),
            item_category: item.item_category.into(),
            unit: item.unit.map(|item| item.into()),
        }
    }
}
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Eq)]
pub struct NestedProcedure {
    pub inner: Procedure,
    pub created_by: User,
}

impl NestedProcedure {
    /// Get the nested struct from the provided primary key.
    ///
    /// # Arguments
    /// * `id` - The primary key of the row.
    /// * `connection` - The database connection.
    pub fn get(
        id: i32,
        connection: &mut PooledConnection<ConnectionManager<diesel::prelude::PgConnection>>,
    ) -> Result<Self, diesel::result::Error>
    {
        let flat_struct = Procedure::get(id, connection)?;
        Ok(Self {
            inner: Procedure::get(flat_struct.id, connection)?,
            created_by: flat_struct.created_by.map(|flat_struct| User::get(flat_struct, connection)).transpose()?,
        })
    }
}
impl From<web_common::database::nested_models::NestedProcedure> for NestedProcedure {
    fn from(item: web_common::database::nested_models::NestedProcedure) -> Self {
        Self {
            inner: item.inner.into(),
            created_by: item.created_by.map(|item| item.into()),
        }
    }
}
impl From<NestedProcedure> for web_common::database::nested_models::NestedProcedure {
    fn from(item: NestedProcedure) -> Self {
        Self {
            inner: item.inner.into(),
            created_by: item.created_by.map(|item| item.into()),
        }
    }
}
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Eq)]
pub struct NestedProjectRequirement {
    pub inner: ProjectRequirement,
    pub created_by: User,
    pub project: NestedProject,
    pub item_category: NestedItemCategory,
    pub unit: Unit,
}

impl NestedProjectRequirement {
    /// Get the nested struct from the provided primary key.
    ///
    /// # Arguments
    /// * `id` - The primary key of the row.
    /// * `connection` - The database connection.
    pub fn get(
        id: i32,
        connection: &mut PooledConnection<ConnectionManager<diesel::prelude::PgConnection>>,
    ) -> Result<Self, diesel::result::Error>
    {
        let flat_struct = ProjectRequirement::get(id, connection)?;
        Ok(Self {
            inner: ProjectRequirement::get(flat_struct.id, connection)?,
            created_by: User::get(flat_struct.created_by, connection)?,
            project: NestedProject::get(flat_struct.project_id, connection)?,
            item_category: NestedItemCategory::get(flat_struct.item_category_id, connection)?,
            unit: flat_struct.unit_id.map(|flat_struct| Unit::get(flat_struct, connection)).transpose()?,
        })
    }
}
impl From<web_common::database::nested_models::NestedProjectRequirement> for NestedProjectRequirement {
    fn from(item: web_common::database::nested_models::NestedProjectRequirement) -> Self {
        Self {
            inner: item.inner.into(),
            created_by: item.created_by.into(),
            project: item.project.into(),
            item_category: item.item_category.into(),
            unit: item.unit.map(|item| item.into()),
        }
    }
}
impl From<NestedProjectRequirement> for web_common::database::nested_models::NestedProjectRequirement {
    fn from(item: NestedProjectRequirement) -> Self {
        Self {
            inner: item.inner.into(),
            created_by: item.created_by.into(),
            project: item.project.into(),
            item_category: item.item_category.into(),
            unit: item.unit.map(|item| item.into()),
        }
    }
}
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Eq)]
pub struct NestedProject {
    pub inner: Project,
    pub state: ProjectState,
    pub parent_project: i32,
    pub created_by: User,
}

impl NestedProject {
    /// Get the nested struct from the provided primary key.
    ///
    /// # Arguments
    /// * `id` - The primary key of the row.
    /// * `connection` - The database connection.
    pub fn get(
        id: i32,
        connection: &mut PooledConnection<ConnectionManager<diesel::prelude::PgConnection>>,
    ) -> Result<Self, diesel::result::Error>
    {
        let flat_struct = Project::get(id, connection)?;
        Ok(Self {
            inner: Project::get(flat_struct.id, connection)?,
            state: ProjectState::get(flat_struct.state_id, connection)?,
            parent_project: flat_struct.parent_project_id.map(|flat_struct| i32::get(flat_struct, connection)).transpose()?,
            created_by: User::get(flat_struct.created_by, connection)?,
        })
    }
}
impl NestedProject {
    /// Search the table by the query.
    ///
    /// # Arguments
    /// * `query` - The string to search for.
    /// * `limit` - The maximum number of results, by default `10`.
    /// * `threshold` - The similarity threshold, by default `0.6`.
    pub fn search(
        query: &str,
        limit: Option<i32>,
        threshold: Option<f64>,
        connection: &mut PooledConnection<ConnectionManager<diesel::prelude::PgConnection>>,
    ) -> Result<Vec<Self>, diesel::result::Error> {
        let flat_structs = Project::search(query, limit, threshold, connection)?;
        let mut nested_structs = Vec::new();
        for flat_struct in flat_structs {
            nested_structs.push(Self::get(flat_struct.id, connection)?);
        }
        Ok(nested_structs)
    }
}
impl From<web_common::database::nested_models::NestedProject> for NestedProject {
    fn from(item: web_common::database::nested_models::NestedProject) -> Self {
        Self {
            inner: item.inner.into(),
            state: item.state.into(),
            parent_project: item.parent_project.map(|item| item.into()),
            created_by: item.created_by.into(),
        }
    }
}
impl From<NestedProject> for web_common::database::nested_models::NestedProject {
    fn from(item: NestedProject) -> Self {
        Self {
            inner: item.inner.into(),
            state: item.state.into(),
            parent_project: item.parent_project.map(|item| item.into()),
            created_by: item.created_by.into(),
        }
    }
}
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Eq)]
pub struct NestedSampleTaxa {
    pub inner: SampleTaxa,
    pub created_by: User,
    pub sample: NestedSample,
    pub taxon: Taxa,
}

impl NestedSampleTaxa {
    /// Get the nested struct from the provided primary key.
    ///
    /// # Arguments
    /// * `id` - The primary key of the row.
    /// * `connection` - The database connection.
    pub fn get(
        id: uuid::Uuid,
        connection: &mut PooledConnection<ConnectionManager<diesel::prelude::PgConnection>>,
    ) -> Result<Self, diesel::result::Error>
    {
        let flat_struct = SampleTaxa::get(id, connection)?;
        Ok(Self {
            inner: SampleTaxa::get(flat_struct.id, connection)?,
            created_by: User::get(flat_struct.created_by, connection)?,
            sample: NestedSample::get(flat_struct.sample_id, connection)?,
            taxon: Taxa::get(flat_struct.taxon_id, connection)?,
        })
    }
}
impl From<web_common::database::nested_models::NestedSampleTaxa> for NestedSampleTaxa {
    fn from(item: web_common::database::nested_models::NestedSampleTaxa) -> Self {
        Self {
            inner: item.inner.into(),
            created_by: item.created_by.into(),
            sample: item.sample.into(),
            taxon: item.taxon.into(),
        }
    }
}
impl From<NestedSampleTaxa> for web_common::database::nested_models::NestedSampleTaxa {
    fn from(item: NestedSampleTaxa) -> Self {
        Self {
            inner: item.inner.into(),
            created_by: item.created_by.into(),
            sample: item.sample.into(),
            taxon: item.taxon.into(),
        }
    }
}
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Eq)]
pub struct NestedSampledIndividualTaxa {
    pub inner: SampledIndividualTaxa,
    pub created_by: User,
    pub sampled_individual: SampledIndividual,
    pub taxon: Taxa,
}

impl NestedSampledIndividualTaxa {
    /// Get the nested struct from the provided primary key.
    ///
    /// # Arguments
    /// * `id` - The primary key of the row.
    /// * `connection` - The database connection.
    pub fn get(
        id: uuid::Uuid,
        connection: &mut PooledConnection<ConnectionManager<diesel::prelude::PgConnection>>,
    ) -> Result<Self, diesel::result::Error>
    {
        let flat_struct = SampledIndividualTaxa::get(id, connection)?;
        Ok(Self {
            inner: SampledIndividualTaxa::get(flat_struct.id, connection)?,
            created_by: User::get(flat_struct.created_by, connection)?,
            sampled_individual: SampledIndividual::get(flat_struct.sampled_individual_id, connection)?,
            taxon: Taxa::get(flat_struct.taxon_id, connection)?,
        })
    }
}
impl From<web_common::database::nested_models::NestedSampledIndividualTaxa> for NestedSampledIndividualTaxa {
    fn from(item: web_common::database::nested_models::NestedSampledIndividualTaxa) -> Self {
        Self {
            inner: item.inner.into(),
            created_by: item.created_by.into(),
            sampled_individual: item.sampled_individual.into(),
            taxon: item.taxon.into(),
        }
    }
}
impl From<NestedSampledIndividualTaxa> for web_common::database::nested_models::NestedSampledIndividualTaxa {
    fn from(item: NestedSampledIndividualTaxa) -> Self {
        Self {
            inner: item.inner.into(),
            created_by: item.created_by.into(),
            sampled_individual: item.sampled_individual.into(),
            taxon: item.taxon.into(),
        }
    }
}
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Eq)]
pub struct NestedSample {
    pub inner: Sample,
    pub created_by: User,
    pub derived_from: Uuid,
}

impl NestedSample {
    /// Get the nested struct from the provided primary key.
    ///
    /// # Arguments
    /// * `id` - The primary key of the row.
    /// * `connection` - The database connection.
    pub fn get(
        id: uuid::Uuid,
        connection: &mut PooledConnection<ConnectionManager<diesel::prelude::PgConnection>>,
    ) -> Result<Self, diesel::result::Error>
    {
        let flat_struct = Sample::get(id, connection)?;
        Ok(Self {
            inner: Sample::get(flat_struct.id, connection)?,
            created_by: flat_struct.created_by.map(|flat_struct| User::get(flat_struct, connection)).transpose()?,
            derived_from: flat_struct.derived_from.map(|flat_struct| Uuid::get(flat_struct, connection)).transpose()?,
        })
    }
}
impl From<web_common::database::nested_models::NestedSample> for NestedSample {
    fn from(item: web_common::database::nested_models::NestedSample) -> Self {
        Self {
            inner: item.inner.into(),
            created_by: item.created_by.map(|item| item.into()),
            derived_from: item.derived_from.map(|item| item.into()),
        }
    }
}
impl From<NestedSample> for web_common::database::nested_models::NestedSample {
    fn from(item: NestedSample) -> Self {
        Self {
            inner: item.inner.into(),
            created_by: item.created_by.map(|item| item.into()),
            derived_from: item.derived_from.map(|item| item.into()),
        }
    }
}
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Eq)]
pub struct NestedSpectra {
    pub inner: Spectra,
    pub spectra_collection: NestedSpectraCollection,
}

impl NestedSpectra {
    /// Get the nested struct from the provided primary key.
    ///
    /// # Arguments
    /// * `id` - The primary key of the row.
    /// * `connection` - The database connection.
    pub fn get(
        id: i32,
        connection: &mut PooledConnection<ConnectionManager<diesel::prelude::PgConnection>>,
    ) -> Result<Self, diesel::result::Error>
    {
        let flat_struct = Spectra::get(id, connection)?;
        Ok(Self {
            inner: Spectra::get(flat_struct.id, connection)?,
            spectra_collection: NestedSpectraCollection::get(flat_struct.spectra_collection_id, connection)?,
        })
    }
}
impl From<web_common::database::nested_models::NestedSpectra> for NestedSpectra {
    fn from(item: web_common::database::nested_models::NestedSpectra) -> Self {
        Self {
            inner: item.inner.into(),
            spectra_collection: item.spectra_collection.into(),
        }
    }
}
impl From<NestedSpectra> for web_common::database::nested_models::NestedSpectra {
    fn from(item: NestedSpectra) -> Self {
        Self {
            inner: item.inner.into(),
            spectra_collection: item.spectra_collection.into(),
        }
    }
}
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Eq)]
pub struct NestedSpectraCollection {
    pub inner: SpectraCollection,
    pub sample: NestedSample,
    pub created_by: User,
}

impl NestedSpectraCollection {
    /// Get the nested struct from the provided primary key.
    ///
    /// # Arguments
    /// * `id` - The primary key of the row.
    /// * `connection` - The database connection.
    pub fn get(
        id: i32,
        connection: &mut PooledConnection<ConnectionManager<diesel::prelude::PgConnection>>,
    ) -> Result<Self, diesel::result::Error>
    {
        let flat_struct = SpectraCollection::get(id, connection)?;
        Ok(Self {
            inner: SpectraCollection::get(flat_struct.id, connection)?,
            sample: NestedSample::get(flat_struct.sample_id, connection)?,
            created_by: User::get(flat_struct.created_by, connection)?,
        })
    }
}
impl From<web_common::database::nested_models::NestedSpectraCollection> for NestedSpectraCollection {
    fn from(item: web_common::database::nested_models::NestedSpectraCollection) -> Self {
        Self {
            inner: item.inner.into(),
            sample: item.sample.into(),
            created_by: item.created_by.into(),
        }
    }
}
impl From<NestedSpectraCollection> for web_common::database::nested_models::NestedSpectraCollection {
    fn from(item: NestedSpectraCollection) -> Self {
        Self {
            inner: item.inner.into(),
            sample: item.sample.into(),
            created_by: item.created_by.into(),
        }
    }
}
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Eq)]
pub struct NestedTeam {
    pub inner: Team,
    pub parent_team: i32,
}

impl NestedTeam {
    /// Get the nested struct from the provided primary key.
    ///
    /// # Arguments
    /// * `id` - The primary key of the row.
    /// * `connection` - The database connection.
    pub fn get(
        id: i32,
        connection: &mut PooledConnection<ConnectionManager<diesel::prelude::PgConnection>>,
    ) -> Result<Self, diesel::result::Error>
    {
        let flat_struct = Team::get(id, connection)?;
        Ok(Self {
            inner: Team::get(flat_struct.id, connection)?,
            parent_team: flat_struct.parent_team_id.map(|flat_struct| i32::get(flat_struct, connection)).transpose()?,
        })
    }
}
impl From<web_common::database::nested_models::NestedTeam> for NestedTeam {
    fn from(item: web_common::database::nested_models::NestedTeam) -> Self {
        Self {
            inner: item.inner.into(),
            parent_team: item.parent_team.map(|item| item.into()),
        }
    }
}
impl From<NestedTeam> for web_common::database::nested_models::NestedTeam {
    fn from(item: NestedTeam) -> Self {
        Self {
            inner: item.inner.into(),
            parent_team: item.parent_team.map(|item| item.into()),
        }
    }
}
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Eq)]
pub struct NestedUserEmail {
    pub inner: UserEmail,
    pub user: User,
    pub login_provider: LoginProvider,
}

impl NestedUserEmail {
    /// Get the nested struct from the provided primary key.
    ///
    /// # Arguments
    /// * `id` - The primary key of the row.
    /// * `connection` - The database connection.
    pub fn get(
        id: i32,
        connection: &mut PooledConnection<ConnectionManager<diesel::prelude::PgConnection>>,
    ) -> Result<Self, diesel::result::Error>
    {
        let flat_struct = UserEmail::get(id, connection)?;
        Ok(Self {
            inner: UserEmail::get(flat_struct.id, connection)?,
            user: User::get(flat_struct.user_id, connection)?,
            login_provider: LoginProvider::get(flat_struct.login_provider_id, connection)?,
        })
    }
}
impl From<web_common::database::nested_models::NestedUserEmail> for NestedUserEmail {
    fn from(item: web_common::database::nested_models::NestedUserEmail) -> Self {
        Self {
            inner: item.inner.into(),
            user: item.user.into(),
            login_provider: item.login_provider.into(),
        }
    }
}
impl From<NestedUserEmail> for web_common::database::nested_models::NestedUserEmail {
    fn from(item: NestedUserEmail) -> Self {
        Self {
            inner: item.inner.into(),
            user: item.user.into(),
            login_provider: item.login_provider.into(),
        }
    }
}
