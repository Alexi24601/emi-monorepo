//! This file is automatically generated by the code generation suite.
//! Do not edit it manually.
//!
//! This file contains the bindings for the SQL operators in the database.

diesel::infix_operator!(Int4and, " & ", diesel::sql_types::Integer, backend: diesel::pg::Pg);
/// Trait for the `&` operator.
pub trait HasInt4and:
    Sized + diesel::expression::Expression<SqlType = diesel::sql_types::Integer>
{
    /// The function to create the `Int4and` struct representing the `&` operator.
    fn int4and<Rhs>(self, rhs: Rhs) -> Int4and<Self, Rhs::Expression>
    where
        Rhs: diesel::expression::AsExpression<diesel::sql_types::Integer>,
    {
        Int4and::new(self, rhs.as_expression())
    }
}

impl<T> HasInt4and for T where
    T: Sized + diesel::expression::Expression<SqlType = diesel::sql_types::Integer>
{
}
