// Generated by diesel_ext

#![allow(unused)]
#![allow(clippy::all)]
use crate::schema::*;
use diesel::sql_types::Interval;
use diesel::sql_types::Numeric;
use diesel::sql_types::Range;
use diesel::Identifiable;
use diesel::Insertable;
use diesel::Queryable;
use diesel::Selectable;
use serde::Deserialize;
use serde::Serialize;

use chrono::offset::Utc;
use chrono::DateTime;
use chrono::NaiveDateTime;
use uuid::Uuid;
#[derive(Insertable, Deserialize, Serialize, Clone, Selectable, Queryable, Debug, Identifiable)]
#[diesel(table_name = archivables)]
pub struct Archivable {
    pub id: Uuid,
    pub archived_at: NaiveDateTime,
    pub archived_by: Uuid,
}

#[derive(Clone, Selectable, Queryable, Debug, Identifiable)]
#[diesel(table_name = container_horizontal_rules)]
pub struct ContainerHorizontalRule {
    pub id: Uuid,
    pub item_type_id: Option<Uuid>,
    pub other_item_type_id: Option<Uuid>,
    pub temperature: Option<Range<Numeric>>,
    pub humidity: Option<Range<Numeric>>,
    pub pressure: Option<Range<Numeric>>,
}

#[derive(Clone, Selectable, Queryable, Debug, Identifiable)]
#[diesel(table_name = container_vertical_rules)]
pub struct ContainerVerticalRule {
    pub id: Uuid,
    pub container_item_type_id: Option<Uuid>,
    pub contained_item_type_id: Option<Uuid>,
    pub temperature: Option<Range<Numeric>>,
    pub humidity: Option<Range<Numeric>>,
    pub pressure: Option<Range<Numeric>>,
}

#[derive(Insertable, Deserialize, Serialize, Clone, Selectable, Queryable, Debug, Identifiable)]
#[diesel(table_name = continuous_units)]
pub struct ContinuousUnit {
    pub id: Uuid,
}

#[derive(Insertable, Deserialize, Serialize, Clone, Selectable, Queryable, Debug, Identifiable)]
#[diesel(table_name = describables)]
pub struct Describable {
    pub id: Uuid,
    pub name: String,
    pub description: Option<String>,
}

#[derive(Insertable, Deserialize, Serialize, Clone, Selectable, Queryable, Debug, Identifiable)]
#[diesel(table_name = discrete_units)]
pub struct DiscreteUnit {
    pub id: Uuid,
}

#[derive(Insertable, Deserialize, Serialize, Clone, Selectable, Queryable, Debug, Identifiable)]
#[diesel(table_name = document_formats)]
pub struct DocumentFormat {
    pub id: Uuid,
}

#[derive(Insertable, Deserialize, Serialize, Clone, Selectable, Queryable, Debug, Identifiable)]
#[diesel(table_name = documents)]
pub struct Document {
    pub id: Uuid,
    pub path: String,
    pub format_id: Uuid,
    pub bytes: i32,
}

#[derive(Insertable, Deserialize, Serialize, Clone, Selectable, Queryable, Debug, Identifiable)]
#[diesel(table_name = editables)]
pub struct Editable {
    pub id: Uuid,
    pub created_at: NaiveDateTime,
    pub created_by: Uuid,
}

#[derive(Insertable, Deserialize, Serialize, Clone, Selectable, Queryable, Debug, Identifiable)]
#[diesel(table_name = edits)]
pub struct Edit {
    pub id: Uuid,
    pub editable_id: Uuid,
}

#[derive(Clone, Selectable, Queryable, Debug, Identifiable)]
#[diesel(primary_key(item_type_id))]
#[diesel(table_name = expirable_item_categories)]
pub struct ExpirableItemCategory {
    pub item_type_id: Uuid,
    pub expiration_interval: Interval,
}

#[derive(Insertable, Deserialize, Serialize, Clone, Selectable, Queryable, Debug, Identifiable)]
#[diesel(table_name = item_categories)]
pub struct ItemCategory {
    pub id: Uuid,
}

#[derive(Insertable, Deserialize, Serialize, Clone, Selectable, Queryable, Debug, Identifiable)]
#[diesel(table_name = item_category_relationships)]
pub struct ItemCategoryRelationship {
    pub id: Uuid,
    pub parent_id: Uuid,
    pub child_id: Uuid,
}

#[derive(Insertable, Deserialize, Serialize, Clone, Selectable, Queryable, Debug, Identifiable)]
#[diesel(table_name = item_category_units)]
pub struct ItemCategoryUnit {
    pub id: Uuid,
    pub item_category_id: Uuid,
    pub unit_id: Uuid,
}

#[derive(Insertable, Deserialize, Serialize, Clone, Selectable, Queryable, Debug, Identifiable)]
#[diesel(table_name = item_continuous_quantities)]
pub struct ItemContinuousQuantity {
    pub id: Uuid,
    pub item_id: Option<Uuid>,
    pub weight: f64,
    pub unit_id: Option<Uuid>,
    pub sensor_id: Option<Uuid>,
    pub measured_at: DateTime<Utc>,
    pub measured_by: Option<Uuid>,
}

#[derive(Insertable, Deserialize, Serialize, Clone, Selectable, Queryable, Debug, Identifiable)]
#[diesel(table_name = item_discrete_quantities)]
pub struct ItemDiscreteQuantity {
    pub id: Uuid,
    pub item_id: Option<Uuid>,
    pub quantity: i32,
    pub unit_id: Option<Uuid>,
    pub measured_at: DateTime<Utc>,
    pub measured_by: Option<Uuid>,
}

#[derive(Insertable, Deserialize, Serialize, Clone, Selectable, Queryable, Debug, Identifiable)]
#[diesel(table_name = item_locations)]
pub struct ItemLocation {
    pub id: Uuid,
    pub item_id: Option<Uuid>,
    pub location_id: Option<Uuid>,
    pub previous_location_id: Option<Uuid>,
}

#[derive(Insertable, Deserialize, Serialize, Clone, Selectable, Queryable, Debug, Identifiable)]
#[diesel(table_name = item_units)]
pub struct ItemUnit {
    pub id: Uuid,
    pub item_id: Uuid,
    pub unit_id: Uuid,
}

#[derive(Insertable, Deserialize, Serialize, Clone, Selectable, Queryable, Debug, Identifiable)]
#[diesel(table_name = items)]
pub struct Item {
    pub id: Uuid,
    pub parent_id: Option<Uuid>,
}

#[derive(Insertable, Deserialize, Serialize, Clone, Selectable, Queryable, Debug, Identifiable)]
#[diesel(table_name = location_states)]
pub struct LocationState {
    pub id: Uuid,
    pub font_awesome_icon: Option<String>,
}

#[derive(Insertable, Deserialize, Serialize, Clone, Selectable, Queryable, Debug, Identifiable)]
#[diesel(table_name = locations)]
pub struct Location {
    pub id: Uuid,
    pub latitude: Option<f64>,
    pub longitude: Option<f64>,
    pub altitude: Option<f64>,
    pub address: Option<String>,
    pub geolocalization_device_id: Option<Uuid>,
    pub altitude_device_id: Option<Uuid>,
    pub parent_location_id: Option<Uuid>,
    pub state_id: Uuid,
}

#[derive(Insertable, Deserialize, Serialize, Clone, Selectable, Queryable, Debug, Identifiable)]
#[diesel(table_name = login_providers)]
pub struct LoginProvider {
    pub id: i16,
    pub name: String,
    pub font_awesome_icon: String,
    pub client_id_var_name: String,
    pub redirect_uri_var_name: String,
    pub oauth_url: String,
    pub scope: String,
}

#[derive(Insertable, Deserialize, Serialize, Clone, Selectable, Queryable, Debug, Identifiable)]
#[diesel(table_name = manufactured_item_categories)]
pub struct ManufacturedItemCategory {
    pub id: Uuid,
    pub cost: f64,
    pub cost_per_day: f64,
    pub currency: String,
    pub manifacturer_id: Uuid,
}

#[derive(Insertable, Deserialize, Serialize, Clone, Selectable, Queryable, Debug, Identifiable)]
#[diesel(primary_key(organization_id, editable_id, role_id))]
#[diesel(table_name = organization_authorizations)]
pub struct OrganizationAuthorization {
    pub organization_id: Uuid,
    pub editable_id: Uuid,
    pub role_id: Uuid,
}

#[derive(Insertable, Deserialize, Serialize, Clone, Selectable, Queryable, Debug, Identifiable)]
#[diesel(table_name = organization_locations)]
pub struct OrganizationLocation {
    pub id: Uuid,
    pub organization_id: Option<Uuid>,
    pub location_id: Option<Uuid>,
    pub previous_location_id: Option<Uuid>,
}

#[derive(Insertable, Deserialize, Serialize, Clone, Selectable, Queryable, Debug, Identifiable)]
#[diesel(table_name = organization_states)]
pub struct OrganizationState {
    pub id: Uuid,
    pub font_awesome_icon: Option<String>,
}

#[derive(Insertable, Deserialize, Serialize, Clone, Selectable, Queryable, Debug, Identifiable)]
#[diesel(table_name = organizations)]
pub struct Organization {
    pub id: Uuid,
    pub state_id: Option<Uuid>,
    pub parent_organization_id: Option<Uuid>,
    pub logo_id: Option<Uuid>,
    pub website_url: Option<String>,
}

#[derive(Insertable, Deserialize, Serialize, Clone, Selectable, Queryable, Debug, Identifiable)]
#[diesel(table_name = primary_user_emails)]
pub struct PrimaryUserEmail {
    pub id: i32,
}

#[derive(Insertable, Deserialize, Serialize, Clone, Selectable, Queryable, Debug, Identifiable)]
#[diesel(table_name = procedure_continuous_requirements)]
pub struct ProcedureContinuousRequirement {
    pub id: Uuid,
    pub procedure_id: Uuid,
    pub item_category_id: Uuid,
    pub quantity: f64,
    pub unit_id: Option<Uuid>,
}

#[derive(Insertable, Deserialize, Serialize, Clone, Selectable, Queryable, Debug, Identifiable)]
#[diesel(table_name = procedure_discrete_requirements)]
pub struct ProcedureDiscreteRequirement {
    pub id: Uuid,
    pub procedure_id: Uuid,
    pub item_category_id: Uuid,
    pub quantity: i32,
    pub unit_id: Option<Uuid>,
}

#[derive(Insertable, Deserialize, Serialize, Clone, Selectable, Queryable, Debug, Identifiable)]
#[diesel(table_name = procedures)]
pub struct Procedure {
    pub id: Uuid,
}

#[derive(Insertable, Deserialize, Serialize, Clone, Selectable, Queryable, Debug, Identifiable)]
#[diesel(table_name = project_continuous_requirements)]
pub struct ProjectContinuousRequirement {
    pub id: Uuid,
    pub project_id: Uuid,
    pub item_id: Uuid,
    pub quantity: f64,
    pub unit_id: Option<Uuid>,
}

#[derive(Insertable, Deserialize, Serialize, Clone, Selectable, Queryable, Debug, Identifiable)]
#[diesel(table_name = project_discrete_requirements)]
pub struct ProjectDiscreteRequirement {
    pub id: Uuid,
    pub project_id: Uuid,
    pub item_id: Uuid,
    pub quantity: f64,
    pub unit_id: Option<Uuid>,
}

#[derive(Insertable, Deserialize, Serialize, Clone, Selectable, Queryable, Debug, Identifiable)]
#[diesel(table_name = project_milestones)]
pub struct ProjectMilestone {
    pub id: Uuid,
    pub project_id: Uuid,
    pub due_date: DateTime<Utc>,
    pub completed_at: Option<DateTime<Utc>>,
}

#[derive(Insertable, Deserialize, Serialize, Clone, Selectable, Queryable, Debug, Identifiable)]
#[diesel(table_name = project_states)]
pub struct ProjectState {
    pub id: Uuid,
}

#[derive(Insertable, Deserialize, Serialize, Clone, Selectable, Queryable, Debug, Identifiable)]
#[diesel(table_name = projects)]
pub struct Project {
    pub id: Uuid,
    pub public: Option<bool>,
    pub state_id: Option<Uuid>,
    pub parent_project_id: Option<Uuid>,
    pub budget: Option<f64>,
    pub expenses: Option<f64>,
    pub currency: Option<String>,
    pub expected_end_date: Option<DateTime<Utc>>,
    pub end_date: Option<DateTime<Utc>>,
    pub website_url: Option<String>,
    pub logo_id: Option<Uuid>,
}

#[derive(Insertable, Deserialize, Serialize, Clone, Selectable, Queryable, Debug, Identifiable)]
#[diesel(table_name = roles)]
pub struct Role {
    pub id: Uuid,
}

#[derive(Insertable, Deserialize, Serialize, Clone, Selectable, Queryable, Debug, Identifiable)]
#[diesel(primary_key(sample_id, taxon_id))]
#[diesel(table_name = sample_taxa)]
pub struct SampleTaxa {
    pub sample_id: Uuid,
    pub taxon_id: Uuid,
}

#[derive(Insertable, Deserialize, Serialize, Clone, Selectable, Queryable, Debug, Identifiable)]
#[diesel(primary_key(sampled_individual_id, taxon_id))]
#[diesel(table_name = sampled_individual_taxa)]
pub struct SampledIndividualTaxa {
    pub sampled_individual_id: Uuid,
    pub taxon_id: Uuid,
}

#[derive(Insertable, Deserialize, Serialize, Clone, Selectable, Queryable, Debug, Identifiable)]
#[diesel(table_name = sampled_individuals)]
pub struct SampledIndividual {
    pub id: Uuid,
}

#[derive(Insertable, Deserialize, Serialize, Clone, Selectable, Queryable, Debug, Identifiable)]
#[diesel(table_name = samples)]
pub struct Sample {
    pub id: Uuid,
    pub derived_from: Option<Uuid>,
}

#[derive(Insertable, Deserialize, Serialize, Clone, Selectable, Queryable, Debug, Identifiable)]
#[diesel(table_name = spectra)]
pub struct Spectra {
    pub id: i32,
    pub spectra_collection_id: Uuid,
}

#[derive(Insertable, Deserialize, Serialize, Clone, Selectable, Queryable, Debug, Identifiable)]
#[diesel(table_name = spectra_collection)]
pub struct SpectraCollection {
    pub id: Uuid,
    pub sample_id: Uuid,
}

#[derive(Insertable, Deserialize, Serialize, Clone, Selectable, Queryable, Debug, Identifiable)]
#[diesel(table_name = taxa)]
pub struct Taxa {
    pub id: Uuid,
}

#[derive(Insertable, Deserialize, Serialize, Clone, Selectable, Queryable, Debug, Identifiable)]
#[diesel(primary_key(team_id, editable_id, role_id))]
#[diesel(table_name = team_authorizations)]
pub struct TeamAuthorization {
    pub team_id: Uuid,
    pub editable_id: Uuid,
    pub role_id: Uuid,
}

#[derive(Insertable, Deserialize, Serialize, Clone, Selectable, Queryable, Debug, Identifiable)]
#[diesel(table_name = team_states)]
pub struct TeamState {
    pub id: Uuid,
    pub font_awesome_icon: String,
}

#[derive(Insertable, Deserialize, Serialize, Clone, Selectable, Queryable, Debug, Identifiable)]
#[diesel(table_name = teams)]
pub struct Team {
    pub id: Uuid,
    pub parent_team_id: Option<Uuid>,
    pub team_state_id: Uuid,
}

#[derive(Insertable, Deserialize, Serialize, Clone, Selectable, Queryable, Debug, Identifiable)]
#[diesel(table_name = units)]
pub struct Unit {
    pub id: Uuid,
    pub symbol: String,
}

#[derive(Insertable, Deserialize, Serialize, Clone, Selectable, Queryable, Debug, Identifiable)]
#[diesel(primary_key(user_id, editable_id, role_id))]
#[diesel(table_name = user_authorizations)]
pub struct UserAuthorization {
    pub user_id: Uuid,
    pub editable_id: Uuid,
    pub role_id: Uuid,
}

#[derive(Insertable, Deserialize, Serialize, Clone, Selectable, Queryable, Debug, Identifiable)]
#[diesel(table_name = user_emails)]
pub struct UserEmail {
    pub id: i32,
    pub email: String,
    pub user_id: Uuid,
    pub login_provider_id: i16,
}

#[derive(Insertable, Deserialize, Serialize, Clone, Selectable, Queryable, Debug, Identifiable)]
#[diesel(primary_key(user_id, document_id))]
#[diesel(table_name = user_pictures)]
pub struct UserPicture {
    pub user_id: Uuid,
    pub document_id: Uuid,
}

#[derive(Insertable, Deserialize, Serialize, Clone, Selectable, Queryable, Debug)]
#[diesel(table_name = users)]
pub struct User {
    pub id: Uuid,
    pub first_name: Option<String>,
    pub middle_name: Option<String>,
    pub last_name: Option<String>,
    pub created_at: NaiveDateTime,
    pub updated_at: NaiveDateTime,
}
