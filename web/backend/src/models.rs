// Generated by diesel_ext

#![allow(unused)]
#![allow(clippy::all)]
use diesel::prelude::*;
use diesel::r2d2::PooledConnection;
use diesel::r2d2::ConnectionManager;
use serde::Serialize;
use serde::Deserialize;
use diesel::Selectable;
use crate::schema::*;
use diesel::Insertable;
use diesel::Identifiable;
use diesel::QueryableByName;
use diesel::Queryable;


use chrono::NaiveDateTime;
use uuid::Uuid;
#[derive(QueryableByName, Insertable, Eq, Deserialize, Serialize, PartialEq, Clone, Selectable, Queryable, Debug)]
#[diesel(table_name = container_horizontal_rules)]
pub struct ContainerHorizontalRule {
    pub id: i32,
    pub created_by: i32,
    pub name: String,
    pub item_type_id: i32,
    pub other_item_type_id: i32,
    pub minimum_temperature: Option<i32>,
    pub maximum_temperature: Option<i32>,
    pub minimum_humidity: Option<i32>,
    pub maximum_humidity: Option<i32>,
    pub minimum_pressure: Option<i32>,
    pub maximum_pressure: Option<i32>,
}

impl From<ContainerHorizontalRule> for web_common::database::tables::ContainerHorizontalRule {
    fn from(item: ContainerHorizontalRule) -> Self {
        Self {
            id: item.id,
            created_by: item.created_by,
            name: item.name,
            item_type_id: item.item_type_id,
            other_item_type_id: item.other_item_type_id,
            minimum_temperature: item.minimum_temperature,
            maximum_temperature: item.maximum_temperature,
            minimum_humidity: item.minimum_humidity,
            maximum_humidity: item.maximum_humidity,
            minimum_pressure: item.minimum_pressure,
            maximum_pressure: item.maximum_pressure,
        }
    }
}

impl From<web_common::database::tables::ContainerHorizontalRule> for ContainerHorizontalRule {
    fn from(item: web_common::database::tables::ContainerHorizontalRule) -> Self {
        Self {
            id: item.id,
            created_by: item.created_by,
            name: item.name,
            item_type_id: item.item_type_id,
            other_item_type_id: item.other_item_type_id,
            minimum_temperature: item.minimum_temperature,
            maximum_temperature: item.maximum_temperature,
            minimum_humidity: item.minimum_humidity,
            maximum_humidity: item.maximum_humidity,
            minimum_pressure: item.minimum_pressure,
            maximum_pressure: item.maximum_pressure,
        }
    }
}

impl ContainerHorizontalRule {
    /// Get the struct from the database by its ID.
    ///
    /// # Arguments
    /// * `id` - The ID of the struct to get.
    /// * `connection` - The connection to the database.
    ///
    pub fn get(
        id: i32,
        connection: &mut PooledConnection<ConnectionManager<diesel::prelude::PgConnection>>
    ) -> Result<Self, diesel::result::Error> {{
        container_horizontal_rules::dsl::container_horizontal_rules
            .filter(container_horizontal_rules::dsl::id.eq(id))
            .first::<Self>(connection)
    }
}

#[derive(QueryableByName, Insertable, Eq, Deserialize, Serialize, PartialEq, Clone, Selectable, Queryable, Debug)]
#[diesel(table_name = container_vertical_rules)]
pub struct ContainerVerticalRule {
    pub id: i32,
    pub created_by: i32,
    pub name: String,
    pub container_item_type_id: i32,
    pub contained_item_type_id: i32,
    pub minimum_temperature: Option<i32>,
    pub maximum_temperature: Option<i32>,
    pub minimum_humidity: Option<i32>,
    pub maximum_humidity: Option<i32>,
    pub minimum_pressure: Option<i32>,
    pub maximum_pressure: Option<i32>,
}

impl From<ContainerVerticalRule> for web_common::database::tables::ContainerVerticalRule {
    fn from(item: ContainerVerticalRule) -> Self {
        Self {
            id: item.id,
            created_by: item.created_by,
            name: item.name,
            container_item_type_id: item.container_item_type_id,
            contained_item_type_id: item.contained_item_type_id,
            minimum_temperature: item.minimum_temperature,
            maximum_temperature: item.maximum_temperature,
            minimum_humidity: item.minimum_humidity,
            maximum_humidity: item.maximum_humidity,
            minimum_pressure: item.minimum_pressure,
            maximum_pressure: item.maximum_pressure,
        }
    }
}

impl From<web_common::database::tables::ContainerVerticalRule> for ContainerVerticalRule {
    fn from(item: web_common::database::tables::ContainerVerticalRule) -> Self {
        Self {
            id: item.id,
            created_by: item.created_by,
            name: item.name,
            container_item_type_id: item.container_item_type_id,
            contained_item_type_id: item.contained_item_type_id,
            minimum_temperature: item.minimum_temperature,
            maximum_temperature: item.maximum_temperature,
            minimum_humidity: item.minimum_humidity,
            maximum_humidity: item.maximum_humidity,
            minimum_pressure: item.minimum_pressure,
            maximum_pressure: item.maximum_pressure,
        }
    }
}

impl ContainerVerticalRule {
    /// Get the struct from the database by its ID.
    ///
    /// # Arguments
    /// * `id` - The ID of the struct to get.
    /// * `connection` - The connection to the database.
    ///
    pub fn get(
        id: i32,
        connection: &mut PooledConnection<ConnectionManager<diesel::prelude::PgConnection>>
    ) -> Result<Self, diesel::result::Error> {{
        container_vertical_rules::dsl::container_vertical_rules
            .filter(container_vertical_rules::dsl::id.eq(id))
            .first::<Self>(connection)
    }
}

#[derive(QueryableByName, Insertable, Eq, Deserialize, Serialize, PartialEq, Clone, Selectable, Queryable, Debug)]
#[diesel(table_name = continuous_units)]
pub struct ContinuousUnit {
    pub id: i32,
}

impl From<ContinuousUnit> for web_common::database::tables::ContinuousUnit {
    fn from(item: ContinuousUnit) -> Self {
        Self {
            id: item.id,
        }
    }
}

impl From<web_common::database::tables::ContinuousUnit> for ContinuousUnit {
    fn from(item: web_common::database::tables::ContinuousUnit) -> Self {
        Self {
            id: item.id,
        }
    }
}

impl ContinuousUnit {
    /// Get the struct from the database by its ID.
    ///
    /// # Arguments
    /// * `id` - The ID of the struct to get.
    /// * `connection` - The connection to the database.
    ///
    pub fn get(
        id: i32,
        connection: &mut PooledConnection<ConnectionManager<diesel::prelude::PgConnection>>
    ) -> Result<Self, diesel::result::Error> {{
        continuous_units::dsl::continuous_units
            .filter(continuous_units::dsl::id.eq(id))
            .first::<Self>(connection)
    }
}

#[derive(QueryableByName, Insertable, Eq, Deserialize, Serialize, PartialEq, Clone, Selectable, Queryable, Debug)]
#[diesel(table_name = discrete_units)]
pub struct DiscreteUnit {
    pub id: i32,
}

impl From<DiscreteUnit> for web_common::database::tables::DiscreteUnit {
    fn from(item: DiscreteUnit) -> Self {
        Self {
            id: item.id,
        }
    }
}

impl From<web_common::database::tables::DiscreteUnit> for DiscreteUnit {
    fn from(item: web_common::database::tables::DiscreteUnit) -> Self {
        Self {
            id: item.id,
        }
    }
}

impl DiscreteUnit {
    /// Get the struct from the database by its ID.
    ///
    /// # Arguments
    /// * `id` - The ID of the struct to get.
    /// * `connection` - The connection to the database.
    ///
    pub fn get(
        id: i32,
        connection: &mut PooledConnection<ConnectionManager<diesel::prelude::PgConnection>>
    ) -> Result<Self, diesel::result::Error> {{
        discrete_units::dsl::discrete_units
            .filter(discrete_units::dsl::id.eq(id))
            .first::<Self>(connection)
    }
}

#[derive(QueryableByName, Insertable, Eq, Deserialize, Serialize, PartialEq, Clone, Selectable, Queryable, Debug)]
#[diesel(table_name = document_formats)]
pub struct DocumentFormat {
    pub id: i32,
    pub extension: String,
    pub mime_type: String,
}

impl From<DocumentFormat> for web_common::database::tables::DocumentFormat {
    fn from(item: DocumentFormat) -> Self {
        Self {
            id: item.id,
            extension: item.extension,
            mime_type: item.mime_type,
        }
    }
}

impl From<web_common::database::tables::DocumentFormat> for DocumentFormat {
    fn from(item: web_common::database::tables::DocumentFormat) -> Self {
        Self {
            id: item.id,
            extension: item.extension,
            mime_type: item.mime_type,
        }
    }
}

impl DocumentFormat {
    /// Get the struct from the database by its ID.
    ///
    /// # Arguments
    /// * `id` - The ID of the struct to get.
    /// * `connection` - The connection to the database.
    ///
    pub fn get(
        id: i32,
        connection: &mut PooledConnection<ConnectionManager<diesel::prelude::PgConnection>>
    ) -> Result<Self, diesel::result::Error> {{
        document_formats::dsl::document_formats
            .filter(document_formats::dsl::id.eq(id))
            .first::<Self>(connection)
    }
}

#[derive(QueryableByName, Insertable, Eq, Deserialize, Serialize, PartialEq, Clone, Selectable, Queryable, Debug)]
#[diesel(table_name = documents)]
pub struct Document {
    pub id: Uuid,
    pub author_id: i32,
    pub path: String,
    pub format_id: i32,
    pub bytes: i32,
}

impl From<Document> for web_common::database::tables::Document {
    fn from(item: Document) -> Self {
        Self {
            id: item.id,
            author_id: item.author_id,
            path: item.path,
            format_id: item.format_id,
            bytes: item.bytes,
        }
    }
}

impl From<web_common::database::tables::Document> for Document {
    fn from(item: web_common::database::tables::Document) -> Self {
        Self {
            id: item.id,
            author_id: item.author_id,
            path: item.path,
            format_id: item.format_id,
            bytes: item.bytes,
        }
    }
}

impl Document {
    /// Get the struct from the database by its ID.
    ///
    /// # Arguments
    /// * `id` - The ID of the struct to get.
    /// * `connection` - The connection to the database.
    ///
    pub fn get(
        id: uuid::Uuid,
        connection: &mut PooledConnection<ConnectionManager<diesel::prelude::PgConnection>>
    ) -> Result<Self, diesel::result::Error> {{
        documents::dsl::documents
            .filter(documents::dsl::id.eq(id))
            .first::<Self>(connection)
    }
}

#[derive(QueryableByName, Insertable, Eq, Deserialize, Serialize, PartialEq, Clone, Selectable, Queryable, Debug)]
#[diesel(table_name = item_categories)]
pub struct ItemCategory {
    pub id: i32,
    pub name: String,
    pub description: String,
    pub created_by: i32,
}

impl From<ItemCategory> for web_common::database::tables::ItemCategory {
    fn from(item: ItemCategory) -> Self {
        Self {
            id: item.id,
            name: item.name,
            description: item.description,
            created_by: item.created_by,
        }
    }
}

impl From<web_common::database::tables::ItemCategory> for ItemCategory {
    fn from(item: web_common::database::tables::ItemCategory) -> Self {
        Self {
            id: item.id,
            name: item.name,
            description: item.description,
            created_by: item.created_by,
        }
    }
}

impl ItemCategory {
    /// Get the struct from the database by its ID.
    ///
    /// # Arguments
    /// * `id` - The ID of the struct to get.
    /// * `connection` - The connection to the database.
    ///
    pub fn get(
        id: i32,
        connection: &mut PooledConnection<ConnectionManager<diesel::prelude::PgConnection>>
    ) -> Result<Self, diesel::result::Error> {{
        item_categories::dsl::item_categories
            .filter(item_categories::dsl::id.eq(id))
            .first::<Self>(connection)
    }
}

#[derive(QueryableByName, Insertable, Eq, Deserialize, Serialize, PartialEq, Clone, Selectable, Queryable, Debug)]
#[diesel(table_name = item_category_relationships)]
pub struct ItemCategoryRelationship {
    pub id: i32,
    pub parent_id: i32,
    pub child_id: i32,
    pub added_by: i32,
}

impl From<ItemCategoryRelationship> for web_common::database::tables::ItemCategoryRelationship {
    fn from(item: ItemCategoryRelationship) -> Self {
        Self {
            id: item.id,
            parent_id: item.parent_id,
            child_id: item.child_id,
            added_by: item.added_by,
        }
    }
}

impl From<web_common::database::tables::ItemCategoryRelationship> for ItemCategoryRelationship {
    fn from(item: web_common::database::tables::ItemCategoryRelationship) -> Self {
        Self {
            id: item.id,
            parent_id: item.parent_id,
            child_id: item.child_id,
            added_by: item.added_by,
        }
    }
}

impl ItemCategoryRelationship {
    /// Get the struct from the database by its ID.
    ///
    /// # Arguments
    /// * `id` - The ID of the struct to get.
    /// * `connection` - The connection to the database.
    ///
    pub fn get(
        id: i32,
        connection: &mut PooledConnection<ConnectionManager<diesel::prelude::PgConnection>>
    ) -> Result<Self, diesel::result::Error> {{
        item_category_relationships::dsl::item_category_relationships
            .filter(item_category_relationships::dsl::id.eq(id))
            .first::<Self>(connection)
    }
}

#[derive(QueryableByName, Insertable, Eq, Deserialize, Serialize, PartialEq, Clone, Selectable, Queryable, Debug)]
#[diesel(table_name = item_category_units)]
pub struct ItemCategoryUnit {
    pub id: i32,
    pub item_category_id: i32,
    pub unit_id: i32,
}

impl From<ItemCategoryUnit> for web_common::database::tables::ItemCategoryUnit {
    fn from(item: ItemCategoryUnit) -> Self {
        Self {
            id: item.id,
            item_category_id: item.item_category_id,
            unit_id: item.unit_id,
        }
    }
}

impl From<web_common::database::tables::ItemCategoryUnit> for ItemCategoryUnit {
    fn from(item: web_common::database::tables::ItemCategoryUnit) -> Self {
        Self {
            id: item.id,
            item_category_id: item.item_category_id,
            unit_id: item.unit_id,
        }
    }
}

impl ItemCategoryUnit {
    /// Get the struct from the database by its ID.
    ///
    /// # Arguments
    /// * `id` - The ID of the struct to get.
    /// * `connection` - The connection to the database.
    ///
    pub fn get(
        id: i32,
        connection: &mut PooledConnection<ConnectionManager<diesel::prelude::PgConnection>>
    ) -> Result<Self, diesel::result::Error> {{
        item_category_units::dsl::item_category_units
            .filter(item_category_units::dsl::id.eq(id))
            .first::<Self>(connection)
    }
}

#[derive(QueryableByName, Insertable, Eq, Deserialize, Serialize, PartialEq, Clone, Selectable, Queryable, Debug)]
#[diesel(table_name = item_continuous_quantities)]
pub struct ItemContinuousQuantity {
    pub id: Uuid,
    pub item_id: Uuid,
    pub amount: i32,
    pub unit_id: i32,
    pub sensor_id: Option<Uuid>,
    pub measured_at: NaiveDateTime,
    pub measured_by: Option<i32>,
}

impl From<ItemContinuousQuantity> for web_common::database::tables::ItemContinuousQuantity {
    fn from(item: ItemContinuousQuantity) -> Self {
        Self {
            id: item.id,
            item_id: item.item_id,
            amount: item.amount,
            unit_id: item.unit_id,
            sensor_id: item.sensor_id,
            measured_at: item.measured_at,
            measured_by: item.measured_by,
        }
    }
}

impl From<web_common::database::tables::ItemContinuousQuantity> for ItemContinuousQuantity {
    fn from(item: web_common::database::tables::ItemContinuousQuantity) -> Self {
        Self {
            id: item.id,
            item_id: item.item_id,
            amount: item.amount,
            unit_id: item.unit_id,
            sensor_id: item.sensor_id,
            measured_at: item.measured_at,
            measured_by: item.measured_by,
        }
    }
}

impl ItemContinuousQuantity {
    /// Get the struct from the database by its ID.
    ///
    /// # Arguments
    /// * `id` - The ID of the struct to get.
    /// * `connection` - The connection to the database.
    ///
    pub fn get(
        id: uuid::Uuid,
        connection: &mut PooledConnection<ConnectionManager<diesel::prelude::PgConnection>>
    ) -> Result<Self, diesel::result::Error> {{
        item_continuous_quantities::dsl::item_continuous_quantities
            .filter(item_continuous_quantities::dsl::id.eq(id))
            .first::<Self>(connection)
    }
}

#[derive(QueryableByName, Insertable, Eq, Deserialize, Serialize, PartialEq, Clone, Selectable, Queryable, Debug)]
#[diesel(table_name = item_discrete_quantities)]
pub struct ItemDiscreteQuantity {
    pub id: Uuid,
    pub item_id: Uuid,
    pub quantity: i32,
    pub unit_id: i32,
    pub measured_at: NaiveDateTime,
    pub measured_by: Option<i32>,
}

impl From<ItemDiscreteQuantity> for web_common::database::tables::ItemDiscreteQuantity {
    fn from(item: ItemDiscreteQuantity) -> Self {
        Self {
            id: item.id,
            item_id: item.item_id,
            quantity: item.quantity,
            unit_id: item.unit_id,
            measured_at: item.measured_at,
            measured_by: item.measured_by,
        }
    }
}

impl From<web_common::database::tables::ItemDiscreteQuantity> for ItemDiscreteQuantity {
    fn from(item: web_common::database::tables::ItemDiscreteQuantity) -> Self {
        Self {
            id: item.id,
            item_id: item.item_id,
            quantity: item.quantity,
            unit_id: item.unit_id,
            measured_at: item.measured_at,
            measured_by: item.measured_by,
        }
    }
}

impl ItemDiscreteQuantity {
    /// Get the struct from the database by its ID.
    ///
    /// # Arguments
    /// * `id` - The ID of the struct to get.
    /// * `connection` - The connection to the database.
    ///
    pub fn get(
        id: uuid::Uuid,
        connection: &mut PooledConnection<ConnectionManager<diesel::prelude::PgConnection>>
    ) -> Result<Self, diesel::result::Error> {{
        item_discrete_quantities::dsl::item_discrete_quantities
            .filter(item_discrete_quantities::dsl::id.eq(id))
            .first::<Self>(connection)
    }
}

#[derive(QueryableByName, Insertable, Eq, Deserialize, Serialize, PartialEq, Clone, Selectable, Queryable, Debug)]
#[diesel(table_name = item_locations)]
pub struct ItemLocation {
    pub id: Uuid,
    pub item_id: Option<Uuid>,
    pub located_by: Option<i32>,
    pub located_at: NaiveDateTime,
    pub location_id: Option<Uuid>,
}

impl From<ItemLocation> for web_common::database::tables::ItemLocation {
    fn from(item: ItemLocation) -> Self {
        Self {
            id: item.id,
            item_id: item.item_id,
            located_by: item.located_by,
            located_at: item.located_at,
            location_id: item.location_id,
        }
    }
}

impl From<web_common::database::tables::ItemLocation> for ItemLocation {
    fn from(item: web_common::database::tables::ItemLocation) -> Self {
        Self {
            id: item.id,
            item_id: item.item_id,
            located_by: item.located_by,
            located_at: item.located_at,
            location_id: item.location_id,
        }
    }
}

impl ItemLocation {
    /// Get the struct from the database by its ID.
    ///
    /// # Arguments
    /// * `id` - The ID of the struct to get.
    /// * `connection` - The connection to the database.
    ///
    pub fn get(
        id: uuid::Uuid,
        connection: &mut PooledConnection<ConnectionManager<diesel::prelude::PgConnection>>
    ) -> Result<Self, diesel::result::Error> {{
        item_locations::dsl::item_locations
            .filter(item_locations::dsl::id.eq(id))
            .first::<Self>(connection)
    }
}

#[derive(QueryableByName, Insertable, Eq, Deserialize, Serialize, PartialEq, Clone, Selectable, Queryable, Debug)]
#[diesel(table_name = item_units)]
pub struct ItemUnit {
    pub id: Uuid,
    pub item_id: Uuid,
    pub unit_id: i32,
}

impl From<ItemUnit> for web_common::database::tables::ItemUnit {
    fn from(item: ItemUnit) -> Self {
        Self {
            id: item.id,
            item_id: item.item_id,
            unit_id: item.unit_id,
        }
    }
}

impl From<web_common::database::tables::ItemUnit> for ItemUnit {
    fn from(item: web_common::database::tables::ItemUnit) -> Self {
        Self {
            id: item.id,
            item_id: item.item_id,
            unit_id: item.unit_id,
        }
    }
}

impl ItemUnit {
    /// Get the struct from the database by its ID.
    ///
    /// # Arguments
    /// * `id` - The ID of the struct to get.
    /// * `connection` - The connection to the database.
    ///
    pub fn get(
        id: uuid::Uuid,
        connection: &mut PooledConnection<ConnectionManager<diesel::prelude::PgConnection>>
    ) -> Result<Self, diesel::result::Error> {{
        item_units::dsl::item_units
            .filter(item_units::dsl::id.eq(id))
            .first::<Self>(connection)
    }
}

#[derive(QueryableByName, Insertable, Eq, Deserialize, Serialize, PartialEq, Clone, Selectable, Queryable, Debug)]
#[diesel(table_name = items)]
pub struct Item {
    pub id: Uuid,
    pub parent_id: Option<Uuid>,
}

impl From<Item> for web_common::database::tables::Item {
    fn from(item: Item) -> Self {
        Self {
            id: item.id,
            parent_id: item.parent_id,
        }
    }
}

impl From<web_common::database::tables::Item> for Item {
    fn from(item: web_common::database::tables::Item) -> Self {
        Self {
            id: item.id,
            parent_id: item.parent_id,
        }
    }
}

impl Item {
    /// Get the struct from the database by its ID.
    ///
    /// # Arguments
    /// * `id` - The ID of the struct to get.
    /// * `connection` - The connection to the database.
    ///
    pub fn get(
        id: uuid::Uuid,
        connection: &mut PooledConnection<ConnectionManager<diesel::prelude::PgConnection>>
    ) -> Result<Self, diesel::result::Error> {{
        items::dsl::items
            .filter(items::dsl::id.eq(id))
            .first::<Self>(connection)
    }
}

#[derive(QueryableByName, Insertable, Eq, Deserialize, Serialize, PartialEq, Clone, Selectable, Queryable, Debug)]
#[diesel(table_name = locations)]
pub struct Location {
    pub id: Uuid,
    pub latitude_degrees: Option<i32>,
    pub latitude_minutes: Option<i32>,
    pub latitude_seconds: Option<i32>,
    pub longitude_degrees: Option<i32>,
    pub longitude_minutes: Option<i32>,
    pub longitude_seconds: Option<i32>,
    pub altitude: Option<i32>,
    pub address: Option<String>,
    pub geolocalization_device_id: Option<Uuid>,
    pub altitude_device_id: Option<Uuid>,
    pub parent_location_id: Option<Uuid>,
}

impl From<Location> for web_common::database::tables::Location {
    fn from(item: Location) -> Self {
        Self {
            id: item.id,
            latitude_degrees: item.latitude_degrees,
            latitude_minutes: item.latitude_minutes,
            latitude_seconds: item.latitude_seconds,
            longitude_degrees: item.longitude_degrees,
            longitude_minutes: item.longitude_minutes,
            longitude_seconds: item.longitude_seconds,
            altitude: item.altitude,
            address: item.address,
            geolocalization_device_id: item.geolocalization_device_id,
            altitude_device_id: item.altitude_device_id,
            parent_location_id: item.parent_location_id,
        }
    }
}

impl From<web_common::database::tables::Location> for Location {
    fn from(item: web_common::database::tables::Location) -> Self {
        Self {
            id: item.id,
            latitude_degrees: item.latitude_degrees,
            latitude_minutes: item.latitude_minutes,
            latitude_seconds: item.latitude_seconds,
            longitude_degrees: item.longitude_degrees,
            longitude_minutes: item.longitude_minutes,
            longitude_seconds: item.longitude_seconds,
            altitude: item.altitude,
            address: item.address,
            geolocalization_device_id: item.geolocalization_device_id,
            altitude_device_id: item.altitude_device_id,
            parent_location_id: item.parent_location_id,
        }
    }
}

impl Location {
    /// Get the struct from the database by its ID.
    ///
    /// # Arguments
    /// * `id` - The ID of the struct to get.
    /// * `connection` - The connection to the database.
    ///
    pub fn get(
        id: uuid::Uuid,
        connection: &mut PooledConnection<ConnectionManager<diesel::prelude::PgConnection>>
    ) -> Result<Self, diesel::result::Error> {{
        locations::dsl::locations
            .filter(locations::dsl::id.eq(id))
            .first::<Self>(connection)
    }
}

#[derive(QueryableByName, Insertable, Eq, Deserialize, Serialize, PartialEq, Clone, Selectable, Queryable, Debug)]
#[diesel(table_name = login_providers)]
pub struct LoginProvider {
    pub id: i32,
    pub name: String,
    pub font_awesome_icon: String,
    pub client_id_var_name: String,
    pub redirect_uri_var_name: String,
    pub oauth_url: String,
    pub scope: String,
}

impl From<LoginProvider> for web_common::database::tables::LoginProvider {
    fn from(item: LoginProvider) -> Self {
        Self {
            id: item.id,
            name: item.name,
            font_awesome_icon: item.font_awesome_icon,
            client_id_var_name: item.client_id_var_name,
            redirect_uri_var_name: item.redirect_uri_var_name,
            oauth_url: item.oauth_url,
            scope: item.scope,
        }
    }
}

impl From<web_common::database::tables::LoginProvider> for LoginProvider {
    fn from(item: web_common::database::tables::LoginProvider) -> Self {
        Self {
            id: item.id,
            name: item.name,
            font_awesome_icon: item.font_awesome_icon,
            client_id_var_name: item.client_id_var_name,
            redirect_uri_var_name: item.redirect_uri_var_name,
            oauth_url: item.oauth_url,
            scope: item.scope,
        }
    }
}

impl LoginProvider {
    /// Get the struct from the database by its ID.
    ///
    /// # Arguments
    /// * `id` - The ID of the struct to get.
    /// * `connection` - The connection to the database.
    ///
    pub fn get(
        id: i32,
        connection: &mut PooledConnection<ConnectionManager<diesel::prelude::PgConnection>>
    ) -> Result<Self, diesel::result::Error> {{
        login_providers::dsl::login_providers
            .filter(login_providers::dsl::id.eq(id))
            .first::<Self>(connection)
    }
}

#[derive(QueryableByName, Insertable, Eq, Deserialize, Serialize, PartialEq, Clone, Selectable, Queryable, Debug)]
#[diesel(table_name = manufactured_item_categories)]
pub struct ManufacturedItemCategory {
    pub id: i32,
    pub cost: i32,
    pub cost_per_day: i32,
    pub currency: String,
    pub manifacturer_id: i32,
}

impl From<ManufacturedItemCategory> for web_common::database::tables::ManufacturedItemCategory {
    fn from(item: ManufacturedItemCategory) -> Self {
        Self {
            id: item.id,
            cost: item.cost,
            cost_per_day: item.cost_per_day,
            currency: item.currency,
            manifacturer_id: item.manifacturer_id,
        }
    }
}

impl From<web_common::database::tables::ManufacturedItemCategory> for ManufacturedItemCategory {
    fn from(item: web_common::database::tables::ManufacturedItemCategory) -> Self {
        Self {
            id: item.id,
            cost: item.cost,
            cost_per_day: item.cost_per_day,
            currency: item.currency,
            manifacturer_id: item.manifacturer_id,
        }
    }
}

impl ManufacturedItemCategory {
    /// Get the struct from the database by its ID.
    ///
    /// # Arguments
    /// * `id` - The ID of the struct to get.
    /// * `connection` - The connection to the database.
    ///
    pub fn get(
        id: i32,
        connection: &mut PooledConnection<ConnectionManager<diesel::prelude::PgConnection>>
    ) -> Result<Self, diesel::result::Error> {{
        manufactured_item_categories::dsl::manufactured_item_categories
            .filter(manufactured_item_categories::dsl::id.eq(id))
            .first::<Self>(connection)
    }
}

#[derive(QueryableByName, Insertable, Eq, Deserialize, Serialize, PartialEq, Clone, Selectable, Queryable, Debug)]
#[diesel(table_name = notifications)]
pub struct Notification {
    pub id: i32,
    pub user_id: i32,
    pub operation: String,
    pub table_name: String,
    pub read: bool,
}

impl From<Notification> for web_common::database::tables::Notification {
    fn from(item: Notification) -> Self {
        Self {
            id: item.id,
            user_id: item.user_id,
            operation: item.operation,
            table_name: item.table_name,
            read: item.read,
        }
    }
}

impl From<web_common::database::tables::Notification> for Notification {
    fn from(item: web_common::database::tables::Notification) -> Self {
        Self {
            id: item.id,
            user_id: item.user_id,
            operation: item.operation,
            table_name: item.table_name,
            read: item.read,
        }
    }
}

impl Notification {
    /// Get the struct from the database by its ID.
    ///
    /// # Arguments
    /// * `id` - The ID of the struct to get.
    /// * `connection` - The connection to the database.
    ///
    pub fn get(
        id: i32,
        connection: &mut PooledConnection<ConnectionManager<diesel::prelude::PgConnection>>
    ) -> Result<Self, diesel::result::Error> {{
        notifications::dsl::notifications
            .filter(notifications::dsl::id.eq(id))
            .first::<Self>(connection)
    }
}

#[derive(QueryableByName, Insertable, Eq, Deserialize, Serialize, PartialEq, Clone, Selectable, Queryable, Debug)]
#[diesel(table_name = organizations)]
pub struct Organization {
    pub id: i32,
    pub parent_organization_id: Option<i32>,
    pub name: String,
}

impl From<Organization> for web_common::database::tables::Organization {
    fn from(item: Organization) -> Self {
        Self {
            id: item.id,
            parent_organization_id: item.parent_organization_id,
            name: item.name,
        }
    }
}

impl From<web_common::database::tables::Organization> for Organization {
    fn from(item: web_common::database::tables::Organization) -> Self {
        Self {
            id: item.id,
            parent_organization_id: item.parent_organization_id,
            name: item.name,
        }
    }
}

impl Organization {
    /// Get the struct from the database by its ID.
    ///
    /// # Arguments
    /// * `id` - The ID of the struct to get.
    /// * `connection` - The connection to the database.
    ///
    pub fn get(
        id: i32,
        connection: &mut PooledConnection<ConnectionManager<diesel::prelude::PgConnection>>
    ) -> Result<Self, diesel::result::Error> {{
        organizations::dsl::organizations
            .filter(organizations::dsl::id.eq(id))
            .first::<Self>(connection)
    }
}

#[derive(QueryableByName, Insertable, Eq, Deserialize, Serialize, PartialEq, Clone, Selectable, Queryable, Debug)]
#[diesel(table_name = primary_user_emails)]
pub struct PrimaryUserEmail {
    pub id: i32,
}

impl From<PrimaryUserEmail> for web_common::database::tables::PrimaryUserEmail {
    fn from(item: PrimaryUserEmail) -> Self {
        Self {
            id: item.id,
        }
    }
}

impl From<web_common::database::tables::PrimaryUserEmail> for PrimaryUserEmail {
    fn from(item: web_common::database::tables::PrimaryUserEmail) -> Self {
        Self {
            id: item.id,
        }
    }
}

impl PrimaryUserEmail {
    /// Get the struct from the database by its ID.
    ///
    /// # Arguments
    /// * `id` - The ID of the struct to get.
    /// * `connection` - The connection to the database.
    ///
    pub fn get(
        id: i32,
        connection: &mut PooledConnection<ConnectionManager<diesel::prelude::PgConnection>>
    ) -> Result<Self, diesel::result::Error> {{
        primary_user_emails::dsl::primary_user_emails
            .filter(primary_user_emails::dsl::id.eq(id))
            .first::<Self>(connection)
    }
}

#[derive(QueryableByName, Insertable, Deserialize, Serialize, PartialEq, Clone, Selectable, Queryable, Debug)]
#[diesel(table_name = procedure_continuous_requirements)]
pub struct ProcedureContinuousRequirement {
    pub id: i32,
    pub created_by: i32,
    pub procedure_id: i32,
    pub item_category_id: i32,
    pub quantity: f64,
    pub unit_id: Option<i32>,
}

impl From<ProcedureContinuousRequirement> for web_common::database::tables::ProcedureContinuousRequirement {
    fn from(item: ProcedureContinuousRequirement) -> Self {
        Self {
            id: item.id,
            created_by: item.created_by,
            procedure_id: item.procedure_id,
            item_category_id: item.item_category_id,
            quantity: item.quantity,
            unit_id: item.unit_id,
        }
    }
}

impl From<web_common::database::tables::ProcedureContinuousRequirement> for ProcedureContinuousRequirement {
    fn from(item: web_common::database::tables::ProcedureContinuousRequirement) -> Self {
        Self {
            id: item.id,
            created_by: item.created_by,
            procedure_id: item.procedure_id,
            item_category_id: item.item_category_id,
            quantity: item.quantity,
            unit_id: item.unit_id,
        }
    }
}

impl ProcedureContinuousRequirement {
    /// Get the struct from the database by its ID.
    ///
    /// # Arguments
    /// * `id` - The ID of the struct to get.
    /// * `connection` - The connection to the database.
    ///
    pub fn get(
        id: i32,
        connection: &mut PooledConnection<ConnectionManager<diesel::prelude::PgConnection>>
    ) -> Result<Self, diesel::result::Error> {{
        procedure_continuous_requirements::dsl::procedure_continuous_requirements
            .filter(procedure_continuous_requirements::dsl::id.eq(id))
            .first::<Self>(connection)
    }
}

#[derive(QueryableByName, Insertable, Eq, Deserialize, Serialize, PartialEq, Clone, Selectable, Queryable, Debug)]
#[diesel(table_name = procedure_discrete_requirements)]
pub struct ProcedureDiscreteRequirement {
    pub id: i32,
    pub created_by: i32,
    pub procedure_id: i32,
    pub item_category_id: i32,
    pub quantity: i32,
    pub unit_id: Option<i32>,
}

impl From<ProcedureDiscreteRequirement> for web_common::database::tables::ProcedureDiscreteRequirement {
    fn from(item: ProcedureDiscreteRequirement) -> Self {
        Self {
            id: item.id,
            created_by: item.created_by,
            procedure_id: item.procedure_id,
            item_category_id: item.item_category_id,
            quantity: item.quantity,
            unit_id: item.unit_id,
        }
    }
}

impl From<web_common::database::tables::ProcedureDiscreteRequirement> for ProcedureDiscreteRequirement {
    fn from(item: web_common::database::tables::ProcedureDiscreteRequirement) -> Self {
        Self {
            id: item.id,
            created_by: item.created_by,
            procedure_id: item.procedure_id,
            item_category_id: item.item_category_id,
            quantity: item.quantity,
            unit_id: item.unit_id,
        }
    }
}

impl ProcedureDiscreteRequirement {
    /// Get the struct from the database by its ID.
    ///
    /// # Arguments
    /// * `id` - The ID of the struct to get.
    /// * `connection` - The connection to the database.
    ///
    pub fn get(
        id: i32,
        connection: &mut PooledConnection<ConnectionManager<diesel::prelude::PgConnection>>
    ) -> Result<Self, diesel::result::Error> {{
        procedure_discrete_requirements::dsl::procedure_discrete_requirements
            .filter(procedure_discrete_requirements::dsl::id.eq(id))
            .first::<Self>(connection)
    }
}

#[derive(QueryableByName, Insertable, Eq, Deserialize, Serialize, PartialEq, Clone, Selectable, Queryable, Debug)]
#[diesel(table_name = procedures)]
pub struct Procedure {
    pub id: i32,
    pub name: String,
    pub description: Option<String>,
    pub created_by: Option<i32>,
}

impl From<Procedure> for web_common::database::tables::Procedure {
    fn from(item: Procedure) -> Self {
        Self {
            id: item.id,
            name: item.name,
            description: item.description,
            created_by: item.created_by,
        }
    }
}

impl From<web_common::database::tables::Procedure> for Procedure {
    fn from(item: web_common::database::tables::Procedure) -> Self {
        Self {
            id: item.id,
            name: item.name,
            description: item.description,
            created_by: item.created_by,
        }
    }
}

impl Procedure {
    /// Get the struct from the database by its ID.
    ///
    /// # Arguments
    /// * `id` - The ID of the struct to get.
    /// * `connection` - The connection to the database.
    ///
    pub fn get(
        id: i32,
        connection: &mut PooledConnection<ConnectionManager<diesel::prelude::PgConnection>>
    ) -> Result<Self, diesel::result::Error> {{
        procedures::dsl::procedures
            .filter(procedures::dsl::id.eq(id))
            .first::<Self>(connection)
    }
}

#[derive(QueryableByName, Insertable, Eq, Deserialize, Serialize, PartialEq, Clone, Selectable, Queryable, Debug)]
#[diesel(table_name = project_requirements)]
pub struct ProjectRequirement {
    pub id: i32,
    pub created_by: i32,
    pub project_id: i32,
    pub item_category_id: i32,
    pub quantity: i32,
    pub unit_id: Option<i32>,
}

impl From<ProjectRequirement> for web_common::database::tables::ProjectRequirement {
    fn from(item: ProjectRequirement) -> Self {
        Self {
            id: item.id,
            created_by: item.created_by,
            project_id: item.project_id,
            item_category_id: item.item_category_id,
            quantity: item.quantity,
            unit_id: item.unit_id,
        }
    }
}

impl From<web_common::database::tables::ProjectRequirement> for ProjectRequirement {
    fn from(item: web_common::database::tables::ProjectRequirement) -> Self {
        Self {
            id: item.id,
            created_by: item.created_by,
            project_id: item.project_id,
            item_category_id: item.item_category_id,
            quantity: item.quantity,
            unit_id: item.unit_id,
        }
    }
}

impl ProjectRequirement {
    /// Get the struct from the database by its ID.
    ///
    /// # Arguments
    /// * `id` - The ID of the struct to get.
    /// * `connection` - The connection to the database.
    ///
    pub fn get(
        id: i32,
        connection: &mut PooledConnection<ConnectionManager<diesel::prelude::PgConnection>>
    ) -> Result<Self, diesel::result::Error> {{
        project_requirements::dsl::project_requirements
            .filter(project_requirements::dsl::id.eq(id))
            .first::<Self>(connection)
    }
}

#[derive(QueryableByName, Insertable, Eq, Deserialize, Serialize, PartialEq, Clone, Selectable, Queryable, Debug)]
#[diesel(table_name = project_states)]
pub struct ProjectState {
    pub id: i32,
    pub name: String,
    pub description: String,
    pub font_awesome_icon: String,
    pub icon_color: String,
}

impl From<ProjectState> for web_common::database::tables::ProjectState {
    fn from(item: ProjectState) -> Self {
        Self {
            id: item.id,
            name: item.name,
            description: item.description,
            font_awesome_icon: item.font_awesome_icon,
            icon_color: item.icon_color,
        }
    }
}

impl From<web_common::database::tables::ProjectState> for ProjectState {
    fn from(item: web_common::database::tables::ProjectState) -> Self {
        Self {
            id: item.id,
            name: item.name,
            description: item.description,
            font_awesome_icon: item.font_awesome_icon,
            icon_color: item.icon_color,
        }
    }
}

impl ProjectState {
    /// Get the struct from the database by its ID.
    ///
    /// # Arguments
    /// * `id` - The ID of the struct to get.
    /// * `connection` - The connection to the database.
    ///
    pub fn get(
        id: i32,
        connection: &mut PooledConnection<ConnectionManager<diesel::prelude::PgConnection>>
    ) -> Result<Self, diesel::result::Error> {{
        project_states::dsl::project_states
            .filter(project_states::dsl::id.eq(id))
            .first::<Self>(connection)
    }
    /// Search for the struct by a given string.
    ///
    /// # Arguments
    /// * `query` - The string to search for.
    /// * `limit` - The maximum number of results, by default `10`.
    /// * `threshold` - The similarity threshold, by default `0.6`.
    /// * `connection` - The connection to the database.
    ///
    pub fn search(
        query: &str,
        limit: Option<i32>,
        threshold: Option<f64>,
        connection: &mut PooledConnection<ConnectionManager<diesel::prelude::PgConnection>>
    ) -> Result<Vec<Self>, diesel::result::Error> {
        use crate::schema::project_states;
        let limit = limit.unwrap_or(10);
        let threshold = threshold.unwrap_or(0.6);
        let similarity_query = concat!(
            "SELECT id, name, description, font_awesome_icon, icon_color FROM project_states ",
            "ORDER BY similarity(name, $1) + similarity(description, $1) DESC LIMIT $3;"
        );
        diesel::sql_query(similarity_query)
            .bind::<diesel::sql_types::Text, _>(query)
            .bind::<diesel::sql_types::Float8, _>(threshold)
            .bind::<diesel::sql_types::Integer, _>(limit)
            .load(connection)
}
}

#[derive(QueryableByName, Insertable, Eq, Deserialize, Serialize, PartialEq, Clone, Selectable, Queryable, Debug)]
#[diesel(table_name = projects)]
pub struct Project {
    pub id: i32,
    pub name: String,
    pub description: String,
    pub public: bool,
    pub state_id: i32,
    pub parent_project_id: Option<i32>,
    pub budget: Option<i64>,
    pub expenses: Option<i64>,
    pub created_by: i32,
    pub created_at: NaiveDateTime,
    pub expected_end_date: Option<NaiveDateTime>,
    pub end_date: Option<NaiveDateTime>,
}

impl From<Project> for web_common::database::tables::Project {
    fn from(item: Project) -> Self {
        Self {
            id: item.id,
            name: item.name,
            description: item.description,
            public: item.public,
            state_id: item.state_id,
            parent_project_id: item.parent_project_id,
            budget: item.budget,
            expenses: item.expenses,
            created_by: item.created_by,
            created_at: item.created_at,
            expected_end_date: item.expected_end_date,
            end_date: item.end_date,
        }
    }
}

impl From<web_common::database::tables::Project> for Project {
    fn from(item: web_common::database::tables::Project) -> Self {
        Self {
            id: item.id,
            name: item.name,
            description: item.description,
            public: item.public,
            state_id: item.state_id,
            parent_project_id: item.parent_project_id,
            budget: item.budget,
            expenses: item.expenses,
            created_by: item.created_by,
            created_at: item.created_at,
            expected_end_date: item.expected_end_date,
            end_date: item.end_date,
        }
    }
}

impl Project {
    /// Get the struct from the database by its ID.
    ///
    /// # Arguments
    /// * `id` - The ID of the struct to get.
    /// * `connection` - The connection to the database.
    ///
    pub fn get(
        id: i32,
        connection: &mut PooledConnection<ConnectionManager<diesel::prelude::PgConnection>>
    ) -> Result<Self, diesel::result::Error> {{
        projects::dsl::projects
            .filter(projects::dsl::id.eq(id))
            .first::<Self>(connection)
    }
    /// Search for the struct by a given string.
    ///
    /// # Arguments
    /// * `query` - The string to search for.
    /// * `limit` - The maximum number of results, by default `10`.
    /// * `threshold` - The similarity threshold, by default `0.6`.
    /// * `connection` - The connection to the database.
    ///
    pub fn search(
        query: &str,
        limit: Option<i32>,
        threshold: Option<f64>,
        connection: &mut PooledConnection<ConnectionManager<diesel::prelude::PgConnection>>
    ) -> Result<Vec<Self>, diesel::result::Error> {
        use crate::schema::projects;
        let limit = limit.unwrap_or(10);
        let threshold = threshold.unwrap_or(0.6);
        let similarity_query = concat!(
            "SELECT id, name, description, public, state_id, parent_project_id, budget, expenses, created_by, created_at, expected_end_date, end_date FROM projects ",
            "ORDER BY similarity(name, $1) + similarity(description, $1) DESC LIMIT $3;"
        );
        diesel::sql_query(similarity_query)
            .bind::<diesel::sql_types::Text, _>(query)
            .bind::<diesel::sql_types::Float8, _>(threshold)
            .bind::<diesel::sql_types::Integer, _>(limit)
            .load(connection)
}
}

#[derive(QueryableByName, Insertable, Eq, Deserialize, Serialize, PartialEq, Clone, Selectable, Queryable, Debug)]
#[diesel(table_name = roles)]
pub struct Role {
    pub id: i32,
    pub name: String,
}

impl From<Role> for web_common::database::tables::Role {
    fn from(item: Role) -> Self {
        Self {
            id: item.id,
            name: item.name,
        }
    }
}

impl From<web_common::database::tables::Role> for Role {
    fn from(item: web_common::database::tables::Role) -> Self {
        Self {
            id: item.id,
            name: item.name,
        }
    }
}

impl Role {
    /// Get the struct from the database by its ID.
    ///
    /// # Arguments
    /// * `id` - The ID of the struct to get.
    /// * `connection` - The connection to the database.
    ///
    pub fn get(
        id: i32,
        connection: &mut PooledConnection<ConnectionManager<diesel::prelude::PgConnection>>
    ) -> Result<Self, diesel::result::Error> {{
        roles::dsl::roles
            .filter(roles::dsl::id.eq(id))
            .first::<Self>(connection)
    }
}

#[derive(QueryableByName, Insertable, Eq, Deserialize, Serialize, PartialEq, Clone, Selectable, Queryable, Debug)]
#[diesel(table_name = sample_taxa)]
pub struct SampleTaxa {
    pub id: Uuid,
    pub created_by: i32,
    pub sample_id: Uuid,
    pub taxon_id: i32,
}

impl From<SampleTaxa> for web_common::database::tables::SampleTaxa {
    fn from(item: SampleTaxa) -> Self {
        Self {
            id: item.id,
            created_by: item.created_by,
            sample_id: item.sample_id,
            taxon_id: item.taxon_id,
        }
    }
}

impl From<web_common::database::tables::SampleTaxa> for SampleTaxa {
    fn from(item: web_common::database::tables::SampleTaxa) -> Self {
        Self {
            id: item.id,
            created_by: item.created_by,
            sample_id: item.sample_id,
            taxon_id: item.taxon_id,
        }
    }
}

impl SampleTaxa {
    /// Get the struct from the database by its ID.
    ///
    /// # Arguments
    /// * `id` - The ID of the struct to get.
    /// * `connection` - The connection to the database.
    ///
    pub fn get(
        id: uuid::Uuid,
        connection: &mut PooledConnection<ConnectionManager<diesel::prelude::PgConnection>>
    ) -> Result<Self, diesel::result::Error> {{
        sample_taxa::dsl::sample_taxa
            .filter(sample_taxa::dsl::id.eq(id))
            .first::<Self>(connection)
    }
}

#[derive(QueryableByName, Insertable, Eq, Deserialize, Serialize, PartialEq, Clone, Selectable, Queryable, Debug)]
#[diesel(table_name = sampled_individual_taxa)]
pub struct SampledIndividualTaxa {
    pub id: Uuid,
    pub created_by: i32,
    pub sampled_individual_id: Uuid,
    pub taxon_id: i32,
}

impl From<SampledIndividualTaxa> for web_common::database::tables::SampledIndividualTaxa {
    fn from(item: SampledIndividualTaxa) -> Self {
        Self {
            id: item.id,
            created_by: item.created_by,
            sampled_individual_id: item.sampled_individual_id,
            taxon_id: item.taxon_id,
        }
    }
}

impl From<web_common::database::tables::SampledIndividualTaxa> for SampledIndividualTaxa {
    fn from(item: web_common::database::tables::SampledIndividualTaxa) -> Self {
        Self {
            id: item.id,
            created_by: item.created_by,
            sampled_individual_id: item.sampled_individual_id,
            taxon_id: item.taxon_id,
        }
    }
}

impl SampledIndividualTaxa {
    /// Get the struct from the database by its ID.
    ///
    /// # Arguments
    /// * `id` - The ID of the struct to get.
    /// * `connection` - The connection to the database.
    ///
    pub fn get(
        id: uuid::Uuid,
        connection: &mut PooledConnection<ConnectionManager<diesel::prelude::PgConnection>>
    ) -> Result<Self, diesel::result::Error> {{
        sampled_individual_taxa::dsl::sampled_individual_taxa
            .filter(sampled_individual_taxa::dsl::id.eq(id))
            .first::<Self>(connection)
    }
}

#[derive(QueryableByName, Insertable, Eq, Deserialize, Serialize, PartialEq, Clone, Selectable, Queryable, Debug)]
#[diesel(table_name = sampled_individuals)]
pub struct SampledIndividual {
    pub id: Uuid,
}

impl From<SampledIndividual> for web_common::database::tables::SampledIndividual {
    fn from(item: SampledIndividual) -> Self {
        Self {
            id: item.id,
        }
    }
}

impl From<web_common::database::tables::SampledIndividual> for SampledIndividual {
    fn from(item: web_common::database::tables::SampledIndividual) -> Self {
        Self {
            id: item.id,
        }
    }
}

impl SampledIndividual {
    /// Get the struct from the database by its ID.
    ///
    /// # Arguments
    /// * `id` - The ID of the struct to get.
    /// * `connection` - The connection to the database.
    ///
    pub fn get(
        id: uuid::Uuid,
        connection: &mut PooledConnection<ConnectionManager<diesel::prelude::PgConnection>>
    ) -> Result<Self, diesel::result::Error> {{
        sampled_individuals::dsl::sampled_individuals
            .filter(sampled_individuals::dsl::id.eq(id))
            .first::<Self>(connection)
    }
}

#[derive(QueryableByName, Insertable, Eq, Deserialize, Serialize, PartialEq, Clone, Selectable, Queryable, Debug)]
#[diesel(table_name = samples)]
pub struct Sample {
    pub id: Uuid,
    pub created_by: Option<i32>,
    pub derived_from: Option<Uuid>,
}

impl From<Sample> for web_common::database::tables::Sample {
    fn from(item: Sample) -> Self {
        Self {
            id: item.id,
            created_by: item.created_by,
            derived_from: item.derived_from,
        }
    }
}

impl From<web_common::database::tables::Sample> for Sample {
    fn from(item: web_common::database::tables::Sample) -> Self {
        Self {
            id: item.id,
            created_by: item.created_by,
            derived_from: item.derived_from,
        }
    }
}

impl Sample {
    /// Get the struct from the database by its ID.
    ///
    /// # Arguments
    /// * `id` - The ID of the struct to get.
    /// * `connection` - The connection to the database.
    ///
    pub fn get(
        id: uuid::Uuid,
        connection: &mut PooledConnection<ConnectionManager<diesel::prelude::PgConnection>>
    ) -> Result<Self, diesel::result::Error> {{
        samples::dsl::samples
            .filter(samples::dsl::id.eq(id))
            .first::<Self>(connection)
    }
}

#[derive(QueryableByName, Insertable, Eq, Deserialize, Serialize, PartialEq, Clone, Selectable, Queryable, Debug)]
#[diesel(table_name = spectra)]
pub struct Spectra {
    pub id: i32,
    pub spectra_collection_id: i32,
}

impl From<Spectra> for web_common::database::tables::Spectra {
    fn from(item: Spectra) -> Self {
        Self {
            id: item.id,
            spectra_collection_id: item.spectra_collection_id,
        }
    }
}

impl From<web_common::database::tables::Spectra> for Spectra {
    fn from(item: web_common::database::tables::Spectra) -> Self {
        Self {
            id: item.id,
            spectra_collection_id: item.spectra_collection_id,
        }
    }
}

impl Spectra {
    /// Get the struct from the database by its ID.
    ///
    /// # Arguments
    /// * `id` - The ID of the struct to get.
    /// * `connection` - The connection to the database.
    ///
    pub fn get(
        id: i32,
        connection: &mut PooledConnection<ConnectionManager<diesel::prelude::PgConnection>>
    ) -> Result<Self, diesel::result::Error> {{
        spectra::dsl::spectra
            .filter(spectra::dsl::id.eq(id))
            .first::<Self>(connection)
    }
}

#[derive(QueryableByName, Insertable, Eq, Deserialize, Serialize, PartialEq, Clone, Selectable, Queryable, Debug)]
#[diesel(table_name = spectra_collection)]
pub struct SpectraCollection {
    pub id: i32,
    pub sample_id: Uuid,
    pub created_by: i32,
}

impl From<SpectraCollection> for web_common::database::tables::SpectraCollection {
    fn from(item: SpectraCollection) -> Self {
        Self {
            id: item.id,
            sample_id: item.sample_id,
            created_by: item.created_by,
        }
    }
}

impl From<web_common::database::tables::SpectraCollection> for SpectraCollection {
    fn from(item: web_common::database::tables::SpectraCollection) -> Self {
        Self {
            id: item.id,
            sample_id: item.sample_id,
            created_by: item.created_by,
        }
    }
}

impl SpectraCollection {
    /// Get the struct from the database by its ID.
    ///
    /// # Arguments
    /// * `id` - The ID of the struct to get.
    /// * `connection` - The connection to the database.
    ///
    pub fn get(
        id: i32,
        connection: &mut PooledConnection<ConnectionManager<diesel::prelude::PgConnection>>
    ) -> Result<Self, diesel::result::Error> {{
        spectra_collection::dsl::spectra_collection
            .filter(spectra_collection::dsl::id.eq(id))
            .first::<Self>(connection)
    }
}

#[derive(QueryableByName, Insertable, Eq, Deserialize, Serialize, PartialEq, Clone, Selectable, Queryable, Debug)]
#[diesel(table_name = taxa)]
pub struct Taxa {
    pub id: i32,
    pub name: String,
    pub ncbi_taxon_id: Option<i32>,
}

impl From<Taxa> for web_common::database::tables::Taxa {
    fn from(item: Taxa) -> Self {
        Self {
            id: item.id,
            name: item.name,
            ncbi_taxon_id: item.ncbi_taxon_id,
        }
    }
}

impl From<web_common::database::tables::Taxa> for Taxa {
    fn from(item: web_common::database::tables::Taxa) -> Self {
        Self {
            id: item.id,
            name: item.name,
            ncbi_taxon_id: item.ncbi_taxon_id,
        }
    }
}

impl Taxa {
    /// Get the struct from the database by its ID.
    ///
    /// # Arguments
    /// * `id` - The ID of the struct to get.
    /// * `connection` - The connection to the database.
    ///
    pub fn get(
        id: i32,
        connection: &mut PooledConnection<ConnectionManager<diesel::prelude::PgConnection>>
    ) -> Result<Self, diesel::result::Error> {{
        taxa::dsl::taxa
            .filter(taxa::dsl::id.eq(id))
            .first::<Self>(connection)
    }
    /// Search for the struct by a given string.
    ///
    /// # Arguments
    /// * `query` - The string to search for.
    /// * `limit` - The maximum number of results, by default `10`.
    /// * `threshold` - The similarity threshold, by default `0.6`.
    /// * `connection` - The connection to the database.
    ///
    pub fn search(
        query: &str,
        limit: Option<i32>,
        threshold: Option<f64>,
        connection: &mut PooledConnection<ConnectionManager<diesel::prelude::PgConnection>>
    ) -> Result<Vec<Self>, diesel::result::Error> {
        use crate::schema::taxa;
        let limit = limit.unwrap_or(10);
        let threshold = threshold.unwrap_or(0.6);
        let similarity_query = concat!(
            "SELECT id, name, ncbi_taxon_id FROM taxa ",
            "ORDER BY similarity(name, $1) DESC LIMIT $3;"
        );
        diesel::sql_query(similarity_query)
            .bind::<diesel::sql_types::Text, _>(query)
            .bind::<diesel::sql_types::Float8, _>(threshold)
            .bind::<diesel::sql_types::Integer, _>(limit)
            .load(connection)
}
}

#[derive(QueryableByName, Insertable, Eq, Deserialize, Serialize, PartialEq, Clone, Selectable, Queryable, Debug)]
#[diesel(table_name = teams)]
pub struct Team {
    pub id: i32,
    pub parent_team_id: Option<i32>,
}

impl From<Team> for web_common::database::tables::Team {
    fn from(item: Team) -> Self {
        Self {
            id: item.id,
            parent_team_id: item.parent_team_id,
        }
    }
}

impl From<web_common::database::tables::Team> for Team {
    fn from(item: web_common::database::tables::Team) -> Self {
        Self {
            id: item.id,
            parent_team_id: item.parent_team_id,
        }
    }
}

impl Team {
    /// Get the struct from the database by its ID.
    ///
    /// # Arguments
    /// * `id` - The ID of the struct to get.
    /// * `connection` - The connection to the database.
    ///
    pub fn get(
        id: i32,
        connection: &mut PooledConnection<ConnectionManager<diesel::prelude::PgConnection>>
    ) -> Result<Self, diesel::result::Error> {{
        teams::dsl::teams
            .filter(teams::dsl::id.eq(id))
            .first::<Self>(connection)
    }
}

#[derive(QueryableByName, Insertable, Eq, Deserialize, Serialize, PartialEq, Clone, Selectable, Queryable, Debug)]
#[diesel(table_name = units)]
pub struct Unit {
    pub id: i32,
    pub name: String,
    pub description: String,
    pub symbol: String,
}

impl From<Unit> for web_common::database::tables::Unit {
    fn from(item: Unit) -> Self {
        Self {
            id: item.id,
            name: item.name,
            description: item.description,
            symbol: item.symbol,
        }
    }
}

impl From<web_common::database::tables::Unit> for Unit {
    fn from(item: web_common::database::tables::Unit) -> Self {
        Self {
            id: item.id,
            name: item.name,
            description: item.description,
            symbol: item.symbol,
        }
    }
}

impl Unit {
    /// Get the struct from the database by its ID.
    ///
    /// # Arguments
    /// * `id` - The ID of the struct to get.
    /// * `connection` - The connection to the database.
    ///
    pub fn get(
        id: i32,
        connection: &mut PooledConnection<ConnectionManager<diesel::prelude::PgConnection>>
    ) -> Result<Self, diesel::result::Error> {{
        units::dsl::units
            .filter(units::dsl::id.eq(id))
            .first::<Self>(connection)
    }
}

#[derive(QueryableByName, Insertable, Eq, Deserialize, Serialize, PartialEq, Clone, Selectable, Queryable, Debug)]
#[diesel(table_name = user_emails)]
pub struct UserEmail {
    pub id: i32,
    pub email: String,
    pub user_id: i32,
    pub login_provider_id: i32,
}

impl From<UserEmail> for web_common::database::tables::UserEmail {
    fn from(item: UserEmail) -> Self {
        Self {
            id: item.id,
            email: item.email,
            user_id: item.user_id,
            login_provider_id: item.login_provider_id,
        }
    }
}

impl From<web_common::database::tables::UserEmail> for UserEmail {
    fn from(item: web_common::database::tables::UserEmail) -> Self {
        Self {
            id: item.id,
            email: item.email,
            user_id: item.user_id,
            login_provider_id: item.login_provider_id,
        }
    }
}

impl UserEmail {
    /// Get the struct from the database by its ID.
    ///
    /// # Arguments
    /// * `id` - The ID of the struct to get.
    /// * `connection` - The connection to the database.
    ///
    pub fn get(
        id: i32,
        connection: &mut PooledConnection<ConnectionManager<diesel::prelude::PgConnection>>
    ) -> Result<Self, diesel::result::Error> {{
        user_emails::dsl::user_emails
            .filter(user_emails::dsl::id.eq(id))
            .first::<Self>(connection)
    }
}

#[derive(QueryableByName, Insertable, Eq, Deserialize, Serialize, PartialEq, Clone, Selectable, Queryable, Debug)]
#[diesel(table_name = users)]
pub struct User {
    pub id: i32,
    pub first_name: String,
    pub middle_name: Option<String>,
    pub last_name: String,
    pub created_at: NaiveDateTime,
    pub updated_at: NaiveDateTime,
}

impl From<User> for web_common::database::tables::User {
    fn from(item: User) -> Self {
        Self {
            id: item.id,
            first_name: item.first_name,
            middle_name: item.middle_name,
            last_name: item.last_name,
            created_at: item.created_at,
            updated_at: item.updated_at,
        }
    }
}

impl From<web_common::database::tables::User> for User {
    fn from(item: web_common::database::tables::User) -> Self {
        Self {
            id: item.id,
            first_name: item.first_name,
            middle_name: item.middle_name,
            last_name: item.last_name,
            created_at: item.created_at,
            updated_at: item.updated_at,
        }
    }
}

impl User {
    /// Get the struct from the database by its ID.
    ///
    /// # Arguments
    /// * `id` - The ID of the struct to get.
    /// * `connection` - The connection to the database.
    ///
    pub fn get(
        id: i32,
        connection: &mut PooledConnection<ConnectionManager<diesel::prelude::PgConnection>>
    ) -> Result<Self, diesel::result::Error> {{
        users::dsl::users
            .filter(users::dsl::id.eq(id))
            .first::<Self>(connection)
    }
    /// Search for the struct by a given string.
    ///
    /// # Arguments
    /// * `query` - The string to search for.
    /// * `limit` - The maximum number of results, by default `10`.
    /// * `threshold` - The similarity threshold, by default `0.6`.
    /// * `connection` - The connection to the database.
    ///
    pub fn search(
        query: &str,
        limit: Option<i32>,
        threshold: Option<f64>,
        connection: &mut PooledConnection<ConnectionManager<diesel::prelude::PgConnection>>
    ) -> Result<Vec<Self>, diesel::result::Error> {
        use crate::schema::users;
        let limit = limit.unwrap_or(10);
        let threshold = threshold.unwrap_or(0.6);
        let similarity_query = concat!(
            "SELECT id, first_name, middle_name, last_name, created_at, updated_at FROM users ",
            "ORDER BY similarity(first_name, $1) + similarity(middle_name, $1) + similarity(last_name, $1) DESC LIMIT $3;"
        );
        diesel::sql_query(similarity_query)
            .bind::<diesel::sql_types::Text, _>(query)
            .bind::<diesel::sql_types::Float8, _>(threshold)
            .bind::<diesel::sql_types::Integer, _>(limit)
            .load(connection)
}
}



#[derive(Deserialize, Serialize, Clone, Debug, PartialEq)]
pub enum TableRow {
    None(None),
    None(None),
    None(None),
    None(None),
    None(None),
    None(None),
    None(None),
    None(None),
    None(None),
    None(None),
    None(None),
    None(None),
    None(None),
    None(None),
    None(None),
    None(None),
    None(None),
    None(None),
    None(None),
    None(None),
    None(None),
    None(None),
    None(None),
    None(None),
    None(None),
    None(None),
    None(None),
    None(None),
    None(None),
    None(None),
    None(None),
    None(None),
    None(None),
    None(None),
    None(None),
    None(None),
    None(None),
    None(None),
}

impl From<web_common::database::tables::TableRow> for TableRow {
    fn from(item: web_common::database::tables::TableRow) -> Self {
        match item {
            web_common::database::tables::TableRow::None(item) => TableRow::None(item.into()),
            web_common::database::tables::TableRow::None(item) => TableRow::None(item.into()),
            web_common::database::tables::TableRow::None(item) => TableRow::None(item.into()),
            web_common::database::tables::TableRow::None(item) => TableRow::None(item.into()),
            web_common::database::tables::TableRow::None(item) => TableRow::None(item.into()),
            web_common::database::tables::TableRow::None(item) => TableRow::None(item.into()),
            web_common::database::tables::TableRow::None(item) => TableRow::None(item.into()),
            web_common::database::tables::TableRow::None(item) => TableRow::None(item.into()),
            web_common::database::tables::TableRow::None(item) => TableRow::None(item.into()),
            web_common::database::tables::TableRow::None(item) => TableRow::None(item.into()),
            web_common::database::tables::TableRow::None(item) => TableRow::None(item.into()),
            web_common::database::tables::TableRow::None(item) => TableRow::None(item.into()),
            web_common::database::tables::TableRow::None(item) => TableRow::None(item.into()),
            web_common::database::tables::TableRow::None(item) => TableRow::None(item.into()),
            web_common::database::tables::TableRow::None(item) => TableRow::None(item.into()),
            web_common::database::tables::TableRow::None(item) => TableRow::None(item.into()),
            web_common::database::tables::TableRow::None(item) => TableRow::None(item.into()),
            web_common::database::tables::TableRow::None(item) => TableRow::None(item.into()),
            web_common::database::tables::TableRow::None(item) => TableRow::None(item.into()),
            web_common::database::tables::TableRow::None(item) => TableRow::None(item.into()),
            web_common::database::tables::TableRow::None(item) => TableRow::None(item.into()),
            web_common::database::tables::TableRow::None(item) => TableRow::None(item.into()),
            web_common::database::tables::TableRow::None(item) => TableRow::None(item.into()),
            web_common::database::tables::TableRow::None(item) => TableRow::None(item.into()),
            web_common::database::tables::TableRow::None(item) => TableRow::None(item.into()),
            web_common::database::tables::TableRow::None(item) => TableRow::None(item.into()),
            web_common::database::tables::TableRow::None(item) => TableRow::None(item.into()),
            web_common::database::tables::TableRow::None(item) => TableRow::None(item.into()),
            web_common::database::tables::TableRow::None(item) => TableRow::None(item.into()),
            web_common::database::tables::TableRow::None(item) => TableRow::None(item.into()),
            web_common::database::tables::TableRow::None(item) => TableRow::None(item.into()),
            web_common::database::tables::TableRow::None(item) => TableRow::None(item.into()),
            web_common::database::tables::TableRow::None(item) => TableRow::None(item.into()),
            web_common::database::tables::TableRow::None(item) => TableRow::None(item.into()),
            web_common::database::tables::TableRow::None(item) => TableRow::None(item.into()),
            web_common::database::tables::TableRow::None(item) => TableRow::None(item.into()),
            web_common::database::tables::TableRow::None(item) => TableRow::None(item.into()),
            web_common::database::tables::TableRow::None(item) => TableRow::None(item.into()),
        }
    }
}
impl From<TableRow> for web_common::database::tables::TableRow {
    fn from(item: TableRow) -> Self {
        match item {
            TableRow::None(item) => web_common::database::tables::TableRow::None(item.into()),
            TableRow::None(item) => web_common::database::tables::TableRow::None(item.into()),
            TableRow::None(item) => web_common::database::tables::TableRow::None(item.into()),
            TableRow::None(item) => web_common::database::tables::TableRow::None(item.into()),
            TableRow::None(item) => web_common::database::tables::TableRow::None(item.into()),
            TableRow::None(item) => web_common::database::tables::TableRow::None(item.into()),
            TableRow::None(item) => web_common::database::tables::TableRow::None(item.into()),
            TableRow::None(item) => web_common::database::tables::TableRow::None(item.into()),
            TableRow::None(item) => web_common::database::tables::TableRow::None(item.into()),
            TableRow::None(item) => web_common::database::tables::TableRow::None(item.into()),
            TableRow::None(item) => web_common::database::tables::TableRow::None(item.into()),
            TableRow::None(item) => web_common::database::tables::TableRow::None(item.into()),
            TableRow::None(item) => web_common::database::tables::TableRow::None(item.into()),
            TableRow::None(item) => web_common::database::tables::TableRow::None(item.into()),
            TableRow::None(item) => web_common::database::tables::TableRow::None(item.into()),
            TableRow::None(item) => web_common::database::tables::TableRow::None(item.into()),
            TableRow::None(item) => web_common::database::tables::TableRow::None(item.into()),
            TableRow::None(item) => web_common::database::tables::TableRow::None(item.into()),
            TableRow::None(item) => web_common::database::tables::TableRow::None(item.into()),
            TableRow::None(item) => web_common::database::tables::TableRow::None(item.into()),
            TableRow::None(item) => web_common::database::tables::TableRow::None(item.into()),
            TableRow::None(item) => web_common::database::tables::TableRow::None(item.into()),
            TableRow::None(item) => web_common::database::tables::TableRow::None(item.into()),
            TableRow::None(item) => web_common::database::tables::TableRow::None(item.into()),
            TableRow::None(item) => web_common::database::tables::TableRow::None(item.into()),
            TableRow::None(item) => web_common::database::tables::TableRow::None(item.into()),
            TableRow::None(item) => web_common::database::tables::TableRow::None(item.into()),
            TableRow::None(item) => web_common::database::tables::TableRow::None(item.into()),
            TableRow::None(item) => web_common::database::tables::TableRow::None(item.into()),
            TableRow::None(item) => web_common::database::tables::TableRow::None(item.into()),
            TableRow::None(item) => web_common::database::tables::TableRow::None(item.into()),
            TableRow::None(item) => web_common::database::tables::TableRow::None(item.into()),
            TableRow::None(item) => web_common::database::tables::TableRow::None(item.into()),
            TableRow::None(item) => web_common::database::tables::TableRow::None(item.into()),
            TableRow::None(item) => web_common::database::tables::TableRow::None(item.into()),
            TableRow::None(item) => web_common::database::tables::TableRow::None(item.into()),
            TableRow::None(item) => web_common::database::tables::TableRow::None(item.into()),
            TableRow::None(item) => web_common::database::tables::TableRow::None(item.into()),
        }
    }
}
impl From<None> for TableRow {
    fn from(item: None) -> Self {
        TableRow::None(item)
    }
}
impl From<None> for TableRow {
    fn from(item: None) -> Self {
        TableRow::None(item)
    }
}
impl From<None> for TableRow {
    fn from(item: None) -> Self {
        TableRow::None(item)
    }
}
impl From<None> for TableRow {
    fn from(item: None) -> Self {
        TableRow::None(item)
    }
}
impl From<None> for TableRow {
    fn from(item: None) -> Self {
        TableRow::None(item)
    }
}
impl From<None> for TableRow {
    fn from(item: None) -> Self {
        TableRow::None(item)
    }
}
impl From<None> for TableRow {
    fn from(item: None) -> Self {
        TableRow::None(item)
    }
}
impl From<None> for TableRow {
    fn from(item: None) -> Self {
        TableRow::None(item)
    }
}
impl From<None> for TableRow {
    fn from(item: None) -> Self {
        TableRow::None(item)
    }
}
impl From<None> for TableRow {
    fn from(item: None) -> Self {
        TableRow::None(item)
    }
}
impl From<None> for TableRow {
    fn from(item: None) -> Self {
        TableRow::None(item)
    }
}
impl From<None> for TableRow {
    fn from(item: None) -> Self {
        TableRow::None(item)
    }
}
impl From<None> for TableRow {
    fn from(item: None) -> Self {
        TableRow::None(item)
    }
}
impl From<None> for TableRow {
    fn from(item: None) -> Self {
        TableRow::None(item)
    }
}
impl From<None> for TableRow {
    fn from(item: None) -> Self {
        TableRow::None(item)
    }
}
impl From<None> for TableRow {
    fn from(item: None) -> Self {
        TableRow::None(item)
    }
}
impl From<None> for TableRow {
    fn from(item: None) -> Self {
        TableRow::None(item)
    }
}
impl From<None> for TableRow {
    fn from(item: None) -> Self {
        TableRow::None(item)
    }
}
impl From<None> for TableRow {
    fn from(item: None) -> Self {
        TableRow::None(item)
    }
}
impl From<None> for TableRow {
    fn from(item: None) -> Self {
        TableRow::None(item)
    }
}
impl From<None> for TableRow {
    fn from(item: None) -> Self {
        TableRow::None(item)
    }
}
impl From<None> for TableRow {
    fn from(item: None) -> Self {
        TableRow::None(item)
    }
}
impl From<None> for TableRow {
    fn from(item: None) -> Self {
        TableRow::None(item)
    }
}
impl From<None> for TableRow {
    fn from(item: None) -> Self {
        TableRow::None(item)
    }
}
impl From<None> for TableRow {
    fn from(item: None) -> Self {
        TableRow::None(item)
    }
}
impl From<None> for TableRow {
    fn from(item: None) -> Self {
        TableRow::None(item)
    }
}
impl From<None> for TableRow {
    fn from(item: None) -> Self {
        TableRow::None(item)
    }
}
impl From<None> for TableRow {
    fn from(item: None) -> Self {
        TableRow::None(item)
    }
}
impl From<None> for TableRow {
    fn from(item: None) -> Self {
        TableRow::None(item)
    }
}
impl From<None> for TableRow {
    fn from(item: None) -> Self {
        TableRow::None(item)
    }
}
impl From<None> for TableRow {
    fn from(item: None) -> Self {
        TableRow::None(item)
    }
}
impl From<None> for TableRow {
    fn from(item: None) -> Self {
        TableRow::None(item)
    }
}
impl From<None> for TableRow {
    fn from(item: None) -> Self {
        TableRow::None(item)
    }
}
impl From<None> for TableRow {
    fn from(item: None) -> Self {
        TableRow::None(item)
    }
}
impl From<None> for TableRow {
    fn from(item: None) -> Self {
        TableRow::None(item)
    }
}
impl From<None> for TableRow {
    fn from(item: None) -> Self {
        TableRow::None(item)
    }
}
impl From<None> for TableRow {
    fn from(item: None) -> Self {
        TableRow::None(item)
    }
}
impl From<None> for TableRow {
    fn from(item: None) -> Self {
        TableRow::None(item)
    }
}
#[derive(Deserialize, Serialize, Clone, Debug, PartialEq)]
pub enum SearcheableTableRow {
    ProjectState(ProjectState),
    Project(Project),
    Taxa(Taxa),
    User(User),
}

impl From<web_common::database::tables::SearcheableTableRow> for SearcheableTableRow {
    fn from(item: web_common::database::tables::SearcheableTableRow) -> Self {
        match item {
            web_common::database::tables::SearcheableTableRow::ProjectState(item) => SearcheableTableRow::ProjectState(item.into()),
            web_common::database::tables::SearcheableTableRow::Project(item) => SearcheableTableRow::Project(item.into()),
            web_common::database::tables::SearcheableTableRow::Taxa(item) => SearcheableTableRow::Taxa(item.into()),
            web_common::database::tables::SearcheableTableRow::User(item) => SearcheableTableRow::User(item.into()),
        }
    }
}
impl From<SearcheableTableRow> for web_common::database::tables::SearcheableTableRow {
    fn from(item: SearcheableTableRow) -> Self {
        match item {
            SearcheableTableRow::ProjectState(item) => web_common::database::tables::SearcheableTableRow::ProjectState(item.into()),
            SearcheableTableRow::Project(item) => web_common::database::tables::SearcheableTableRow::Project(item.into()),
            SearcheableTableRow::Taxa(item) => web_common::database::tables::SearcheableTableRow::Taxa(item.into()),
            SearcheableTableRow::User(item) => web_common::database::tables::SearcheableTableRow::User(item.into()),
        }
    }
}
impl From<ProjectState> for SearcheableTableRow {
    fn from(item: ProjectState) -> Self {
        SearcheableTableRow::ProjectState(item)
    }
}
impl From<Project> for SearcheableTableRow {
    fn from(item: Project) -> Self {
        SearcheableTableRow::Project(item)
    }
}
impl From<Taxa> for SearcheableTableRow {
    fn from(item: Taxa) -> Self {
        SearcheableTableRow::Taxa(item)
    }
}
impl From<User> for SearcheableTableRow {
    fn from(item: User) -> Self {
        SearcheableTableRow::User(item)
    }
}
#[derive(Deserialize, Serialize, Clone, Debug, PartialEq, Copy, Eq, )]
pub enum Table {
    ContainerHorizontalRule,
    ContainerVerticalRule,
    ContinuousUnit,
    DiscreteUnit,
    DocumentFormat,
    Document,
    ItemCategory,
    ItemCategoryRelationship,
    ItemCategoryUnit,
    ItemContinuousQuantity,
    ItemDiscreteQuantity,
    ItemLocation,
    ItemUnit,
    Item,
    Location,
    LoginProvider,
    ManufacturedItemCategory,
    Notification,
    Organization,
    PrimaryUserEmail,
    ProcedureContinuousRequirement,
    ProcedureDiscreteRequirement,
    Procedure,
    ProjectRequirement,
    ProjectState,
    Project,
    Role,
    SampleTaxa,
    SampledIndividualTaxa,
    SampledIndividual,
    Sample,
    Spectra,
    SpectraCollection,
    Taxa,
    Team,
    Unit,
    UserEmail,
    User,
}

impl Table {
    pub fn name(&self) -> &'static str {
        match self {
            Table::ContainerHorizontalRule => "container_horizontal_rules",
            Table::ContainerVerticalRule => "container_vertical_rules",
            Table::ContinuousUnit => "continuous_units",
            Table::DiscreteUnit => "discrete_units",
            Table::DocumentFormat => "document_formats",
            Table::Document => "documents",
            Table::ItemCategory => "item_categories",
            Table::ItemCategoryRelationship => "item_category_relationships",
            Table::ItemCategoryUnit => "item_category_units",
            Table::ItemContinuousQuantity => "item_continuous_quantities",
            Table::ItemDiscreteQuantity => "item_discrete_quantities",
            Table::ItemLocation => "item_locations",
            Table::ItemUnit => "item_units",
            Table::Item => "items",
            Table::Location => "locations",
            Table::LoginProvider => "login_providers",
            Table::ManufacturedItemCategory => "manufactured_item_categories",
            Table::Notification => "notifications",
            Table::Organization => "organizations",
            Table::PrimaryUserEmail => "primary_user_emails",
            Table::ProcedureContinuousRequirement => "procedure_continuous_requirements",
            Table::ProcedureDiscreteRequirement => "procedure_discrete_requirements",
            Table::Procedure => "procedures",
            Table::ProjectRequirement => "project_requirements",
            Table::ProjectState => "project_states",
            Table::Project => "projects",
            Table::Role => "roles",
            Table::SampleTaxa => "sample_taxa",
            Table::SampledIndividualTaxa => "sampled_individual_taxa",
            Table::SampledIndividual => "sampled_individuals",
            Table::Sample => "samples",
            Table::Spectra => "spectra",
            Table::SpectraCollection => "spectra_collection",
            Table::Taxa => "taxa",
            Table::Team => "teams",
            Table::Unit => "units",
            Table::UserEmail => "user_emails",
            Table::User => "users",
        }
    }
}
impl std::fmt::Display for Table {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {{
        write!(f, "{}", self.name())
    }
}
impl From<&str> for Table {
    fn from(item: &str) -> Self {
        match item {
            "container_horizontal_rules" => Table::ContainerHorizontalRule,
            "container_vertical_rules" => Table::ContainerVerticalRule,
            "continuous_units" => Table::ContinuousUnit,
            "discrete_units" => Table::DiscreteUnit,
            "document_formats" => Table::DocumentFormat,
            "documents" => Table::Document,
            "item_categories" => Table::ItemCategory,
            "item_category_relationships" => Table::ItemCategoryRelationship,
            "item_category_units" => Table::ItemCategoryUnit,
            "item_continuous_quantities" => Table::ItemContinuousQuantity,
            "item_discrete_quantities" => Table::ItemDiscreteQuantity,
            "item_locations" => Table::ItemLocation,
            "item_units" => Table::ItemUnit,
            "items" => Table::Item,
            "locations" => Table::Location,
            "login_providers" => Table::LoginProvider,
            "manufactured_item_categories" => Table::ManufacturedItemCategory,
            "notifications" => Table::Notification,
            "organizations" => Table::Organization,
            "primary_user_emails" => Table::PrimaryUserEmail,
            "procedure_continuous_requirements" => Table::ProcedureContinuousRequirement,
            "procedure_discrete_requirements" => Table::ProcedureDiscreteRequirement,
            "procedures" => Table::Procedure,
            "project_requirements" => Table::ProjectRequirement,
            "project_states" => Table::ProjectState,
            "projects" => Table::Project,
            "roles" => Table::Role,
            "sample_taxa" => Table::SampleTaxa,
            "sampled_individual_taxa" => Table::SampledIndividualTaxa,
            "sampled_individuals" => Table::SampledIndividual,
            "samples" => Table::Sample,
            "spectra" => Table::Spectra,
            "spectra_collection" => Table::SpectraCollection,
            "taxa" => Table::Taxa,
            "teams" => Table::Team,
            "units" => Table::Unit,
            "user_emails" => Table::UserEmail,
            "users" => Table::User,
            _ => panic!("Unknown tables name"),
        }
    }
}
impl From<web_common::database::tables::Table> for Table {
    fn from(item: web_common::database::tables::Table) -> Self {
        match item {
            web_common::database::tables::Table::ContainerHorizontalRule => Table::ContainerHorizontalRule,
            web_common::database::tables::Table::ContainerVerticalRule => Table::ContainerVerticalRule,
            web_common::database::tables::Table::ContinuousUnit => Table::ContinuousUnit,
            web_common::database::tables::Table::DiscreteUnit => Table::DiscreteUnit,
            web_common::database::tables::Table::DocumentFormat => Table::DocumentFormat,
            web_common::database::tables::Table::Document => Table::Document,
            web_common::database::tables::Table::ItemCategory => Table::ItemCategory,
            web_common::database::tables::Table::ItemCategoryRelationship => Table::ItemCategoryRelationship,
            web_common::database::tables::Table::ItemCategoryUnit => Table::ItemCategoryUnit,
            web_common::database::tables::Table::ItemContinuousQuantity => Table::ItemContinuousQuantity,
            web_common::database::tables::Table::ItemDiscreteQuantity => Table::ItemDiscreteQuantity,
            web_common::database::tables::Table::ItemLocation => Table::ItemLocation,
            web_common::database::tables::Table::ItemUnit => Table::ItemUnit,
            web_common::database::tables::Table::Item => Table::Item,
            web_common::database::tables::Table::Location => Table::Location,
            web_common::database::tables::Table::LoginProvider => Table::LoginProvider,
            web_common::database::tables::Table::ManufacturedItemCategory => Table::ManufacturedItemCategory,
            web_common::database::tables::Table::Notification => Table::Notification,
            web_common::database::tables::Table::Organization => Table::Organization,
            web_common::database::tables::Table::PrimaryUserEmail => Table::PrimaryUserEmail,
            web_common::database::tables::Table::ProcedureContinuousRequirement => Table::ProcedureContinuousRequirement,
            web_common::database::tables::Table::ProcedureDiscreteRequirement => Table::ProcedureDiscreteRequirement,
            web_common::database::tables::Table::Procedure => Table::Procedure,
            web_common::database::tables::Table::ProjectRequirement => Table::ProjectRequirement,
            web_common::database::tables::Table::ProjectState => Table::ProjectState,
            web_common::database::tables::Table::Project => Table::Project,
            web_common::database::tables::Table::Role => Table::Role,
            web_common::database::tables::Table::SampleTaxa => Table::SampleTaxa,
            web_common::database::tables::Table::SampledIndividualTaxa => Table::SampledIndividualTaxa,
            web_common::database::tables::Table::SampledIndividual => Table::SampledIndividual,
            web_common::database::tables::Table::Sample => Table::Sample,
            web_common::database::tables::Table::Spectra => Table::Spectra,
            web_common::database::tables::Table::SpectraCollection => Table::SpectraCollection,
            web_common::database::tables::Table::Taxa => Table::Taxa,
            web_common::database::tables::Table::Team => Table::Team,
            web_common::database::tables::Table::Unit => Table::Unit,
            web_common::database::tables::Table::UserEmail => Table::UserEmail,
            web_common::database::tables::Table::User => Table::User,
        }
    }
}
impl From<Table> for web_common::database::tables::Table {
    fn from(item: Table) -> Self {
        match item {
            Table::ContainerHorizontalRule => web_common::database::tables::Table::ContainerHorizontalRule,
            Table::ContainerVerticalRule => web_common::database::tables::Table::ContainerVerticalRule,
            Table::ContinuousUnit => web_common::database::tables::Table::ContinuousUnit,
            Table::DiscreteUnit => web_common::database::tables::Table::DiscreteUnit,
            Table::DocumentFormat => web_common::database::tables::Table::DocumentFormat,
            Table::Document => web_common::database::tables::Table::Document,
            Table::ItemCategory => web_common::database::tables::Table::ItemCategory,
            Table::ItemCategoryRelationship => web_common::database::tables::Table::ItemCategoryRelationship,
            Table::ItemCategoryUnit => web_common::database::tables::Table::ItemCategoryUnit,
            Table::ItemContinuousQuantity => web_common::database::tables::Table::ItemContinuousQuantity,
            Table::ItemDiscreteQuantity => web_common::database::tables::Table::ItemDiscreteQuantity,
            Table::ItemLocation => web_common::database::tables::Table::ItemLocation,
            Table::ItemUnit => web_common::database::tables::Table::ItemUnit,
            Table::Item => web_common::database::tables::Table::Item,
            Table::Location => web_common::database::tables::Table::Location,
            Table::LoginProvider => web_common::database::tables::Table::LoginProvider,
            Table::ManufacturedItemCategory => web_common::database::tables::Table::ManufacturedItemCategory,
            Table::Notification => web_common::database::tables::Table::Notification,
            Table::Organization => web_common::database::tables::Table::Organization,
            Table::PrimaryUserEmail => web_common::database::tables::Table::PrimaryUserEmail,
            Table::ProcedureContinuousRequirement => web_common::database::tables::Table::ProcedureContinuousRequirement,
            Table::ProcedureDiscreteRequirement => web_common::database::tables::Table::ProcedureDiscreteRequirement,
            Table::Procedure => web_common::database::tables::Table::Procedure,
            Table::ProjectRequirement => web_common::database::tables::Table::ProjectRequirement,
            Table::ProjectState => web_common::database::tables::Table::ProjectState,
            Table::Project => web_common::database::tables::Table::Project,
            Table::Role => web_common::database::tables::Table::Role,
            Table::SampleTaxa => web_common::database::tables::Table::SampleTaxa,
            Table::SampledIndividualTaxa => web_common::database::tables::Table::SampledIndividualTaxa,
            Table::SampledIndividual => web_common::database::tables::Table::SampledIndividual,
            Table::Sample => web_common::database::tables::Table::Sample,
            Table::Spectra => web_common::database::tables::Table::Spectra,
            Table::SpectraCollection => web_common::database::tables::Table::SpectraCollection,
            Table::Taxa => web_common::database::tables::Table::Taxa,
            Table::Team => web_common::database::tables::Table::Team,
            Table::Unit => web_common::database::tables::Table::Unit,
            Table::UserEmail => web_common::database::tables::Table::UserEmail,
            Table::User => web_common::database::tables::Table::User,
        }
    }
}
#[derive(Deserialize, Serialize, Clone, Debug, PartialEq, Copy, Eq, )]
pub enum SearcheableTable {
    None,
    None,
    None,
    None,
}

impl SearcheableTable {
    /// Search for the struct by a given string.
    ///
    /// # Arguments
    /// * `query` - The string to search for.
    /// * `limit` - The maximum number of results, by default `10`.
    /// * `threshold` - The similarity threshold, by default `0.6`.
    /// * `connection` - The connection to the database.
    ///
    pub fn search(
        &self,
        query: &str,
        limit: Option<i32>,
        threshold: Option<f64>,
        connection: &mut PooledConnection<ConnectionManager<diesel::prelude::PgConnection>>
    ) -> Result<Vec<Searcheable{capitalized_table_type}Row>, diesel::result::Error> {{
        Ok(match self {{
            SearcheableTable::ProjectState => ProjectState::search(query, limit, threshold, connection)?.into_iter().map(SearcheableTableRow::from).collect::<Vec<SearcheableTableRow>>(),
            SearcheableTable::Project => Project::search(query, limit, threshold, connection)?.into_iter().map(SearcheableTableRow::from).collect::<Vec<SearcheableTableRow>>(),
            SearcheableTable::Taxa => Taxa::search(query, limit, threshold, connection)?.into_iter().map(SearcheableTableRow::from).collect::<Vec<SearcheableTableRow>>(),
            SearcheableTable::User => User::search(query, limit, threshold, connection)?.into_iter().map(SearcheableTableRow::from).collect::<Vec<SearcheableTableRow>>(),
        })
    }
}
impl From<&str> for SearcheableTable {
    fn from(item: &str) -> Self {
        match item {
            "project_states" => SearcheableTable::ProjectState,
            "projects" => SearcheableTable::Project,
            "taxa" => SearcheableTable::Taxa,
            "users" => SearcheableTable::User,
            _ => panic!("Unknown tables name"),
        }
    }
}
impl From<SearcheableTable> for web_common::database::tables::SearcheableTable {
    fn from(item: SearcheableTable) -> Self {
        match item {
            SearcheableTable::ProjectState => web_common::database::tables::SearcheableTable::ProjectState,
            SearcheableTable::Project => web_common::database::tables::SearcheableTable::Project,
            SearcheableTable::Taxa => web_common::database::tables::SearcheableTable::Taxa,
            SearcheableTable::User => web_common::database::tables::SearcheableTable::User,
        }
    }
}
impl From<web_common::database::tables::SearcheableTable> for SearcheableTable {
    fn from(item: web_common::database::tables::SearcheableTable) -> Self {
        match item {
            web_common::database::tables::SearcheableTable::ProjectState => SearcheableTable::ProjectState,
            web_common::database::tables::SearcheableTable::Project => SearcheableTable::Project,
            web_common::database::tables::SearcheableTable::Taxa => SearcheableTable::Taxa,
            web_common::database::tables::SearcheableTable::User => SearcheableTable::User,
        }
    }
}
